{"version":3,"file":"CreateEvent-BDPVlP36.js","sources":["../../src/pages/Administration/pages/EventAdmin/pages/CreateEvent/CreateEvent.tsx"],"sourcesContent":["import EventAdminForm from \"../../components/EventAdminForm.tsx\"\nimport React from \"react\"\nimport { postEvent } from \"../../../../services/EventAdminService.ts\"\nimport { DateTime } from \"luxon\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useAuth } from \"../../../../../../shared/hooks.ts\"\nimport { Container } from \"@mui/material\"\nimport { apiErrorService } from \"../../../../../../domain/services/ApiErrorService.ts\"\nimport { useNotifications } from \"@toolpad/core/useNotifications\"\n\nexport default function CreateEvent() {\n  const { token } = useAuth() as { token: string }\n  const navigate = useNavigate()\n  const notifications = useNotifications()\n\n  const handleCancel = () => void navigate(\"/dashboard\")\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    void createEvent(event)\n  }\n\n  const createEvent = async (event: React.FormEvent<HTMLFormElement>) => {\n    const data = new FormData(event.currentTarget)\n    console.log(data)\n    try {\n      const response = await postEvent(\n        data.get(\"description\") as string,\n        DateTime.fromFormat(data.get(\"startDate\") as string, \"dd/MM/yyyy\").toSQLDate() as string,\n        DateTime.fromFormat(data.get(\"endDate\") as string, \"dd/MM/yyyy\").toSQLDate() as string,\n        data.get(\"scope\") as string,\n        !!data.get(\"isPublic\"),\n        token,\n        data.get(\"website\") ? (data.get(\"website\") as string) : undefined,\n        undefined,\n        data.get(\"organizerId\") as string,\n      )\n      await navigate(`/admin/${response.data.id}`)\n    } catch (e) {\n      notifications.show(\"Edit event failed. \" + apiErrorService.toString(e), {\n        autoHideDuration: 3000,\n        severity: \"error\", // Could be 'success', 'error', 'warning', 'info'.\n      })\n    }\n  }\n\n  return (\n    <Container>\n      <EventAdminForm canEdit handleSubmit={handleSubmit} handleCancel={handleCancel} />\n    </Container>\n  )\n}\n"],"names":["CreateEvent","token","useAuth","navigate","useNavigate","notifications","useNotifications","handleCancel","handleSubmit","event","preventDefault","createEvent","data","FormData","currentTarget","console","log","response","postEvent","get","DateTime","fromFormat","toSQLDate","undefined","id","e","show","apiErrorService","toString","autoHideDuration","severity","Container","children","EventAdminForm","canEdit"],"mappings":"iyBAUA,SAAwBA,GAAc,CACpC,KAAM,CAAEC,MAAAA,CAAAA,EAAUC,EAAAA,EACZC,EAAWC,EAAAA,EACXC,EAAgBC,EAAAA,EAEhBC,EAAeA,IAAM,KAAKJ,EAAS,YAAY,EAC/CK,EAAgBC,GAA4C,CAChEA,EAAMC,eAAAA,EACDC,EAAYF,CAAK,CACxB,EAEME,EAAc,MAAOF,GAA4C,CACrE,MAAMG,EAAO,IAAIC,SAASJ,EAAMK,aAAa,EAC7CC,QAAQC,IAAIJ,CAAI,EAChB,GAAI,CACF,MAAMK,EAAW,MAAMC,EACrBN,EAAKO,IAAI,aAAa,EACtBC,EAASC,WAAWT,EAAKO,IAAI,WAAW,EAAa,YAAY,EAAEG,UAAAA,EACnEF,EAASC,WAAWT,EAAKO,IAAI,SAAS,EAAa,YAAY,EAAEG,YACjEV,EAAKO,IAAI,OAAO,EAChB,CAAC,CAACP,EAAKO,IAAI,UAAU,EACrBlB,EACAW,EAAKO,IAAI,SAAS,EAAKP,EAAKO,IAAI,SAAS,EAAeI,OACxDA,OACAX,EAAKO,IAAI,aAAa,CACxB,EACA,MAAMhB,EAAS,UAAUc,EAASL,KAAKY,EAAE,EAAE,CAC7C,OAASC,EAAG,CACVpB,EAAcqB,KAAK,sBAAwBC,EAAgBC,SAASH,CAAC,EAAG,CACtEI,iBAAkB,IAClBC,SAAU,OAAA,CACX,CACH,CACF,EAEA,SACGC,EAAS,CAAAC,WACPC,EAAc,CAACC,QAAO,GAAC1B,aAAAA,EAA4BD,aAAAA,CAAAA,CAA6B,CAAA,CACxE,CAEf"}