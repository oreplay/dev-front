{"version":3,"file":"Relay-CMwAFFkO.js","sources":["../../node_modules/@mui/icons-material/esm/Person.js","../../src/pages/Results/pages/Results/pages/Relay/pages/RelayResults/components/RelayResultLegItem.tsx","../../src/pages/Results/pages/Results/pages/Relay/pages/RelayResults/components/RelayResultItem.tsx","../../src/pages/Results/pages/Results/pages/Relay/pages/RelayResults/components/RelayResultContainer.tsx","../../src/pages/Results/pages/Results/pages/Relay/pages/RelayResults/components/RelayVirtualTicket/RelayVirtualTicket.tsx","../../src/pages/Results/pages/Results/pages/Relay/pages/RelayResults/RelayResults.tsx","../../src/pages/Results/pages/Results/pages/Relay/pages/RelayLegs/RelayLegs.tsx","../../src/pages/Results/pages/Results/pages/Relay/services/RelayService.ts","../../src/pages/Results/pages/Results/pages/Relay/Relay.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4m0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4\"\n}), 'Person');","import { Box, Typography } from \"@mui/material\"\nimport RaceTime from \"../../../../../../../components/RaceTime.tsx\"\nimport { parseResultStatus } from \"../../../../../../../shared/sortingFunctions/sortRunners.ts\"\nimport { ProcessedTeamRunnerModel } from \"../../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\n\ntype RelayResultLegItemProps = {\n  legParticipant: ProcessedTeamRunnerModel\n  handleRowClick?: (runner: ProcessedTeamRunnerModel) => void\n}\n\nexport default function RelayResultLegItem({\n  legParticipant,\n  handleRowClick,\n}: RelayResultLegItemProps) {\n  const status = parseResultStatus(legParticipant.stage.status_code as string)\n  const hasChipDownload = true //hasChipDownloadFunction(runner) // TODO: Uncomment after backend bug fix\n\n  return (\n    <Box\n      sx={{\n        display: \"table-row\",\n        cursor: \"pointer\",\n        \"&:hover\": {\n          backgroundColor: \"#fffbf0\",\n        },\n      }}\n      onClick={handleRowClick ? () => handleRowClick(legParticipant) : undefined}\n    >\n      <Box sx={{ display: \"table-cell\", textAlign: \"left\", padding: \"4px 0px\" }}>\n        <Typography sx={{ fontSize: \"small\" }}>{`${legParticipant.leg_number}.`}</Typography>\n      </Box>\n      <Box sx={{ display: \"table-cell\", overflow: \"hidden\", textAlign: \"left\" }}>\n        <Typography sx={{ fontSize: \"small\" }}>{legParticipant.full_name}</Typography>\n      </Box>\n      <Box sx={{ display: \"table-cell\", textAlign: \"right\" }}>\n        <RaceTime\n          displayStatus\n          isFinalTime={hasChipDownload}\n          status={status}\n          finish_time={legParticipant.stage.finish_time}\n          time_seconds={legParticipant.stage.time_seconds}\n          start_time={legParticipant.stage.start_time}\n          style={{ fontSize: \"small\" }}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { ProcessedRunnerModel } from \"../../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { parseResultStatus } from \"../../../../../../../shared/sortingFunctions/sortRunners.ts\"\nimport { RESULT_STATUS_TEXT } from \"../../../../../../../shared/constants.ts\"\nimport RacePosition from \"../../../../../../../components/RacePosition..tsx\"\nimport RaceTime from \"../../../../../../../components/RaceTime.tsx\"\nimport RaceTimeBehind from \"../../../../../../../components/RaceTimeBehind.tsx\"\nimport {\n  hasChipDownload as hasChipDownloadFunction,\n  isRunnerNC,\n} from \"../../../../../shared/functions.ts\"\nimport { Box, Typography } from \"@mui/material\"\nimport RelayResultLegItem from \"./RelayResultLegItem.tsx\"\n\nexport default function RelayResultItem({\n  runner,\n  handleRowClick,\n}: {\n  runner: ProcessedRunnerModel\n  handleRowClick: (runner: ProcessedRunnerModel) => void\n}) {\n  const status = parseResultStatus(runner.stage.status_code as string)\n  const statusOkOrNc = status === RESULT_STATUS_TEXT.ok || isRunnerNC(runner)\n  const hasChipDownload = hasChipDownloadFunction(runner)\n\n  return (\n    <Box\n      sx={{ display: \"table-row\", borderBottom: \"1px solid #f2f2f2\" }}\n      onClick={() => handleRowClick(runner)}\n    >\n      <Box sx={{ display: \"table-cell\", padding: \"12px 2px\" }}>\n        <RacePosition\n          position={runner.stage.position}\n          hasDownload={hasChipDownload}\n          isNC={isRunnerNC(runner)}\n        />\n      </Box>\n      <Box sx={{ display: \"table-cell\", padding: \"12px 2px\" }}>\n        <Box\n          sx={{\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          <Box\n            sx={{\n              width: \"100%\",\n              display: \"inline-flex\",\n              gap: \"5px\",\n            }}\n          >\n            <Box sx={{ overflow: \"hidden\", flexGrow: 1 }}>\n              <Typography sx={{ fontSize: \"1em\", color: \"inherit\", overflow: \"hidden\" }}>\n                {runner.full_name}\n              </Typography>\n            </Box>\n            <RaceTime\n              displayStatus\n              isFinalTime={hasChipDownload}\n              status={status}\n              finish_time={runner.stage.finish_time}\n              time_seconds={runner.stage.time_seconds}\n              start_time={runner.stage.start_time}\n            />\n            <RaceTimeBehind\n              display={statusOkOrNc && runner.stage.finish_time != null && hasChipDownload}\n              time_behind={runner.stage.time_behind}\n            />\n          </Box>\n          <Box sx={{ display: \"table\" }}>\n            {runner.runners?.map((legRunner) => (\n              <RelayResultLegItem key={legRunner.id} legParticipant={legRunner} />\n            ))}\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n","import { ReactNode } from \"react\"\nimport { Box } from \"@mui/material\"\nimport NowProvider from \"../../../../../../../components/NowProvider.tsx\"\n\ninterface RelayResultContainerProps {\n  children?: ReactNode\n}\n\nexport default function RelayResultContainer({ children }: RelayResultContainerProps) {\n  return (\n    <Box sx={{ display: \"table\", width: \"100%\", borderCollapse: \"collapse\" }}>\n      <NowProvider>{children}</NowProvider>\n    </Box>\n  )\n}\n","import {\n  VirtualTicketContainer,\n  VirtualTicketProps,\n} from \"../../../../../../../../components/VirtualTicket/VirtualTicketContainer.tsx\"\nimport NotImplementedAlertBox from \"../../../../../../../../../../components/NotImplementedAlertBox.tsx\"\n\nexport default function RelayVirtualTicket(props: VirtualTicketProps) {\n  return (\n    <VirtualTicketContainer\n      isTicketOpen={props.isTicketOpen}\n      runner={props.runner}\n      handleCloseTicket={props.handleCloseTicket}\n    >\n      <NotImplementedAlertBox />\n    </VirtualTicketContainer>\n  )\n}\n","import { ResultsPageProps } from \"../../../../shared/commonProps.ts\"\nimport { ProcessedRunnerModel } from \"../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { AxiosError } from \"axios\"\nimport { RunnerModel } from \"../../../../../../../../shared/EntityTypes.ts\"\nimport ChooseClassMsg from \"../../../../components/ChooseClassMsg.tsx\"\nimport ResultsListSkeleton from \"../../../../../../components/ResultsList/ResultListSkeleton.tsx\"\nimport GeneralErrorFallback from \"../../../../../../../../components/GeneralErrorFallback.tsx\"\nimport RelayResultItem from \"./components/RelayResultItem.tsx\"\nimport ExperimentalFeatureAlert from \"../../../../../../../../components/ExperimentalFeatureAlert.tsx\"\nimport RelayResultContainer from \"./components/RelayResultContainer.tsx\"\nimport RelayVirtualTicket from \"./components/RelayVirtualTicket/RelayVirtualTicket.tsx\"\nimport { useVirtualTicket } from \"../../../../../../components/VirtualTicket/shared/hooks.ts\"\n\ninterface RelayResultProps\n  extends ResultsPageProps<ProcessedRunnerModel[], AxiosError<RunnerModel[]>> {\n  setClassClubId: (classOrClubId: string, isClass: boolean) => void\n}\n\nexport default function RelayResults(props: RelayResultProps) {\n  const runnersList = props.runnersQuery.data\n\n  const [isTicketOpen, selectedRunner, handleRowClick, handleCloseTicket] = useVirtualTicket()\n\n  if (!props.activeItem) {\n    return <ChooseClassMsg />\n  }\n  if (props.runnersQuery.isFetching) {\n    return <ResultsListSkeleton />\n  } else if (props.runnersQuery.isError) {\n    return <GeneralErrorFallback />\n  } else {\n    return (\n      <>\n        <ExperimentalFeatureAlert />\n        <RelayResultContainer>\n          {runnersList?.map((runner: ProcessedRunnerModel) => (\n            <RelayResultItem key={runner.id} runner={runner} handleRowClick={handleRowClick} />\n          ))}\n        </RelayResultContainer>\n        <RelayVirtualTicket\n          isTicketOpen={isTicketOpen}\n          runner={selectedRunner}\n          handleCloseTicket={handleCloseTicket}\n          setClassClubId={props.setClassClubId}\n        />\n      </>\n    )\n  }\n}\n","import { ResultsPageProps } from \"../../../../shared/commonProps.ts\"\nimport { ProcessedRunnerModel } from \"../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { AxiosError } from \"axios\"\nimport { RunnerModel } from \"../../../../../../../../shared/EntityTypes.ts\"\nimport ResultListContainer from \"../../../../../../components/ResultsList/ResultListContainer.tsx\"\nimport NotImplementedAlertBox from \"../../../../../../../../components/NotImplementedAlertBox.tsx\"\n\nexport default function RelayLegs(\n  // @ts-expect-error TS6133: variable is declared but never used\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  props: ResultsPageProps<ProcessedRunnerModel[], AxiosError<RunnerModel[]>>,\n) {\n  return (\n    <ResultListContainer>\n      <NotImplementedAlertBox />\n    </ResultListContainer>\n  )\n}\n","import { ProcessedRunnerModel } from \"../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { getRunnersInStage } from \"../../../../../services/EventService.ts\"\nimport { sortRunners } from \"../../../../../shared/sortingFunctions/sortRunners.ts\"\nimport { processRunnerData } from \"../../../../../components/VirtualTicket/shared/virtualTicketFunctions.ts\"\n\nexport async function getRelayRunnersByClass(\n  eventId: string,\n  stageId: string,\n  classId: string,\n): Promise<ProcessedRunnerModel[]> {\n  // Make query\n  const runnersPage = await getRunnersInStage(eventId, stageId, classId)\n  let runnersList = runnersPage.data\n\n  // Order\n  runnersList = sortRunners(runnersList)\n\n  // Runner processing\n  return processRunnerData(runnersList)\n}\n","import RelayResults from \"./pages/RelayResults/RelayResults.tsx\"\nimport StageLayout from \"../../components/Layout/StageLayout.tsx\"\nimport { useFetchClasses } from \"../../../../shared/hooks.ts\"\nimport { BottomNavigationAction } from \"@mui/material\"\nimport EmojiEventsIcon from \"@mui/icons-material/EmojiEvents\"\nimport ResultTabs from \"../../components/ResultTabs.tsx\"\nimport { useTranslation } from \"react-i18next\"\nimport { Person } from \"@mui/icons-material\"\nimport { useQuery } from \"react-query\"\nimport { ProcessedRunnerModel } from \"../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { AxiosError } from \"axios\"\nimport { RunnerModel } from \"../../../../../../shared/EntityTypes.ts\"\nimport { useParams } from \"react-router-dom\"\nimport { useCallback } from \"react\"\nimport RelayLegs from \"./pages/RelayLegs/RelayLegs.tsx\"\nimport { getRelayRunnersByClass } from \"./services/RelayService.ts\"\n\nconst menu_options_labels = [\"results\", \"legs\"]\n\nexport default function Relay() {\n  const { t } = useTranslation()\n\n  // Get stage's and event's ids\n  const { eventId, stageId } = useParams()\n  if (!eventId || !stageId) {\n    throw new Error(\"Event Id or Stage Id is missing\")\n  }\n\n  const {\n    activeItem,\n    classesQuery,\n    clubsQuery,\n    isClass,\n    setClassClubId,\n    refresh: refreshClassesClubs,\n  } = useFetchClasses()\n\n  // Query runners\n  const runnersQueryByClasses = useQuery<ProcessedRunnerModel[], AxiosError<RunnerModel[]>>(\n    [\"results\", \"classes\", activeItem?.id],\n    () =>\n      activeItem\n        ? getRelayRunnersByClass(eventId, stageId, activeItem.id)\n        : Promise.reject(new Error(\"No active class\")),\n    {\n      enabled: !!activeItem && isClass,\n      refetchOnWindowFocus: false,\n    },\n  )\n\n  // Handle re-fetching\n  const handleRefreshClick = useCallback(() => {\n    refreshClassesClubs()\n    void runnersQueryByClasses.refetch()\n  }, [refreshClassesClubs, runnersQueryByClasses])\n\n  return (\n    <StageLayout\n      key={\"stageLayout\"}\n      activeItem={activeItem}\n      isClass={isClass}\n      classesQuery={classesQuery}\n      clubsQuery={clubsQuery}\n      setActiveClassClub={setClassClubId}\n      handleRefreshClick={handleRefreshClick}\n    >\n      <ResultTabs\n        defaultMenu={0}\n        menuOptions={[\n          <BottomNavigationAction\n            key={\"relayResults\"}\n            label={t(\"StageHeader.Results\")}\n            icon={<EmojiEventsIcon />}\n          />,\n          <BottomNavigationAction\n            key={\"RogaineScorePointsMenu\"}\n            label={t(\"StageHeader.RelayLegs\")}\n            icon={<Person />}\n          />,\n        ]}\n        menuOptionsLabels={menu_options_labels}\n      >\n        <RelayResults\n          runnersQuery={runnersQueryByClasses}\n          activeItem={activeItem}\n          isClass={isClass}\n          setClassClubId={setClassClubId}\n        />\n        <RelayLegs runnersQuery={runnersQueryByClasses} activeItem={activeItem} isClass={isClass} />\n      </ResultTabs>\n    </StageLayout>\n  )\n}\n"],"names":["Person","createSvgIcon","_jsx","RelayResultLegItem","legParticipant","handleRowClick","status","parseResultStatus","stage","status_code","Box","sx","display","cursor","backgroundColor","onClick","undefined","children","textAlign","padding","Typography","fontSize","leg_number","overflow","full_name","RaceTime","displayStatus","isFinalTime","finish_time","time_seconds","start_time","style","RelayResultItem","runner","statusOkOrNc","RESULT_STATUS_TEXT","ok","isRunnerNC","hasChipDownload","hasChipDownloadFunction","borderBottom","RacePosition","position","hasDownload","isNC","width","flexDirection","_jsxs","gap","flexGrow","color","RaceTimeBehind","time_behind","runners","map","legRunner","id","RelayResultContainer","borderCollapse","NowProvider","RelayVirtualTicket","props","VirtualTicketContainer","isTicketOpen","handleCloseTicket","NotImplementedAlertBox","RelayResults","runnersList","runnersQuery","data","selectedRunner","useVirtualTicket","activeItem","isFetching","ResultsListSkeleton","isError","GeneralErrorFallback","_Fragment","ExperimentalFeatureAlert","setClassClubId","ChooseClassMsg","RelayLegs","ResultListContainer","getRelayRunnersByClass","eventId","stageId","classId","getRunnersInStage","sortRunners","processRunnerData","menu_options_labels","Relay","t","useTranslation","useParams","Error","classesQuery","clubsQuery","isClass","refresh","refreshClassesClubs","useFetchClasses","runnersQueryByClasses","useQuery","Promise","reject","enabled","refetchOnWindowFocus","handleRefreshClick","useCallback","refetch","StageLayout","setActiveClassClub","ResultTabs","defaultMenu","menuOptions","BottomNavigationAction","label","icon","EmojiEventsIcon","menuOptionsLabels"],"mappings":"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","x_google_ignoreList":[0]}