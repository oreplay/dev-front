{"version":3,"file":"EventAdmin-D58PcsVQ.js","sources":["../../node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js","../../node_modules/@mui/material/DialogContentText/DialogContentText.js","../../node_modules/@mui/icons-material/esm/Autorenew.js","../../node_modules/@mui/icons-material/esm/ContentCopy.js","../../node_modules/@mui/icons-material/esm/DeleteOutlined.js","../../node_modules/@mui/icons-material/esm/PersonOff.js","../../node_modules/@mui/icons-material/esm/Settings.js","../../node_modules/@mui/x-data-grid/components/cell/GridActionsCellItem.js","../../src/shared/Constants.ts","../../src/pages/Administration/pages/EventAdmin/pages/EventAdmin/components/GridActionsSettingsMenuDialogItem.tsx","../../src/pages/Administration/pages/EventAdmin/pages/EventAdmin/components/GridActionsSettingsMenu.tsx","../../src/domain/models/ApiStats.ts","../../src/domain/models/Gender.ts","../../src/domain/services/StageStatsService.ts","../../src/pages/Administration/pages/EventAdmin/pages/EventAdmin/components/StagesDataGrid.tsx","../../src/shared/Components.tsx","../../src/pages/Administration/pages/EventAdmin/pages/EventAdmin/components/RefreshButton.tsx","../../src/pages/Administration/pages/EventAdmin/pages/EventAdmin/components/EventTokenDataGrid.tsx","../../src/pages/Administration/pages/EventAdmin/pages/EventAdmin/components/DeleteEventButton.tsx","../../src/shared/EntityTypes.ts","../../src/pages/Administration/pages/EventAdmin/pages/EventAdmin/EventAdmin.tsx"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDialogContentTextUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogContentText', slot);\n}\nconst dialogContentTextClasses = generateUtilityClasses('MuiDialogContentText', ['root']);\nexport default dialogContentTextClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Typography from \"../Typography/index.js\";\nimport { getDialogContentTextUtilityClass } from \"./dialogContentTextClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);\n  return {\n    ...classes,\n    // forward classes to the Typography\n    ...composedClasses\n  };\n};\nconst DialogContentTextRoot = styled(Typography, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiDialogContentText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nconst DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogContentText'\n  });\n  const {\n    children,\n    className,\n    ...ownerState\n  } = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogContentTextRoot, {\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ...props,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogContentText;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6m6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26\"\n}), 'Autorenew');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2m0 16H8V7h11z\"\n}), 'ContentCopy');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 9v10H8V9zm-1.5-6h-5l-1 1H5v2h14V4h-3.5zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2z\"\n}), 'DeleteOutlined');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.65 5.82C9.36 4.72 10.6 4 12 4c2.21 0 4 1.79 4 4 0 1.4-.72 2.64-1.82 3.35zM20 17.17c-.02-1.1-.63-2.11-1.61-2.62-.54-.28-1.13-.54-1.77-.76zm1.19 4.02L2.81 2.81 1.39 4.22l8.89 8.89c-1.81.23-3.39.79-4.67 1.45-1 .51-1.61 1.54-1.61 2.66V20h13.17l2.61 2.61z\"\n}), 'PersonOff');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6\"\n}), 'Settings');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"label\", \"icon\", \"showInMenu\", \"onClick\"],\n  _excluded2 = [\"label\", \"icon\", \"showInMenu\", \"onClick\", \"closeMenuOnClick\", \"closeMenu\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GridActionsCellItem = forwardRef((props, ref) => {\n  const rootProps = useGridRootProps();\n  if (!props.showInMenu) {\n    const {\n        label,\n        icon,\n        onClick\n      } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n    const handleClick = event => {\n      onClick?.(event);\n    };\n    return /*#__PURE__*/_jsx(rootProps.slots.baseIconButton, _extends({\n      size: \"small\",\n      role: \"menuitem\",\n      \"aria-label\": label\n    }, other, {\n      onClick: handleClick\n    }, rootProps.slotProps?.baseIconButton, {\n      ref: ref,\n      children: /*#__PURE__*/React.cloneElement(icon, {\n        fontSize: 'small'\n      })\n    }));\n  }\n  const {\n      label,\n      icon,\n      onClick,\n      closeMenuOnClick = true,\n      closeMenu\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded2);\n  const handleClick = event => {\n    onClick?.(event);\n    if (closeMenuOnClick) {\n      closeMenu?.();\n    }\n  };\n  return /*#__PURE__*/_jsxs(MenuItem, _extends({\n    ref: ref\n  }, other, {\n    onClick: handleClick,\n    children: [icon && /*#__PURE__*/_jsx(ListItemIcon, {\n      children: icon\n    }), label]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridActionsCellItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * from https://mui.com/material-ui/api/button-base/#ButtonBase-prop-component\n   */\n  component: PropTypes.elementType,\n  icon: PropTypes.element,\n  label: PropTypes.string.isRequired,\n  showInMenu: PropTypes.bool\n} : void 0;\nexport { GridActionsCellItem };","import { STAGE_TYPE_DATABASE_ID } from \"../pages/Results/pages/Results/shared/constants.ts\"\n\nexport const stageTypes = [\n  { value: STAGE_TYPE_DATABASE_ID.FootO, label: \"FootO\" },\n  { value: STAGE_TYPE_DATABASE_ID.Rogaine, label: \"Rogaine\" },\n  { value: STAGE_TYPE_DATABASE_ID.Relay, label: \"Relay\" },\n  { value: STAGE_TYPE_DATABASE_ID.Totals, label: \"Totals\" },\n  //{value:\"de0dd0e7-ffcb-4bdf-9842-327b4ea33e44\", label:\"TrailO\"},\n  //{value:\"a30b2db1-5649-491a-b5a8-ca53e4e58461\", label:\"Raid\"},\n  //{value:\"ce5e95ea-9f2b-4a98-86e1-2b43651adfee\", label:\"MassStart\"},\n  //{value:\"080f7e57-9525-4b9a-95ee-b2113f411afd\", label:\"ChaseStart\"}\n]\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\"\nimport { useCallback, useState } from \"react\"\nimport MenuItem from \"@mui/material/MenuItem\"\n\ninterface Props {\n  icon: JSX.Element\n  menuText: string\n  action: () => void\n  menuCloseAction: () => void\n  dialogTitle: string\n  dialogBody: string\n  dialogCancelButtonText: string\n  dialogConfirmButtonText: string\n}\n\nexport default function GridActionsSettingsMenuDialogItem(props: Props) {\n  // Internal states\n  const [isDialogOpen, setIsDialogOpen] = useState<boolean>(false)\n\n  // handle functions\n  const handleClose = useCallback(() => {\n    setIsDialogOpen(false)\n  }, [])\n  const handleOpen = useCallback(() => {\n    setIsDialogOpen(true)\n  }, [])\n\n  // Component\n  return (\n    <>\n      <MenuItem onClick={handleOpen}>\n        <ListItemIcon>{props.icon}</ListItemIcon>\n        <ListItemText>{props.menuText}</ListItemText>\n      </MenuItem>\n      <Dialog open={isDialogOpen}>\n        <DialogTitle id=\"alert-dialog-title\">{props.dialogTitle}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">{props.dialogBody}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            variant=\"outlined\"\n            onClick={() => {\n              handleClose()\n              props.menuCloseAction()\n            }}\n          >\n            {props.dialogCancelButtonText}\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              props.action()\n              handleClose()\n            }}\n            color=\"error\"\n            autoFocus\n          >\n            {props.dialogConfirmButtonText}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n","import React, { useState } from \"react\"\nimport { GridActionsCellItem } from \"@mui/x-data-grid\"\nimport SettingsIcon from \"@mui/icons-material/Settings\"\nimport Tooltip from \"@mui/material/Tooltip\"\nimport { useTranslation } from \"react-i18next\"\nimport { Divider, ListItemIcon, ListItemText, Menu } from \"@mui/material\"\nimport MenuItem from \"@mui/material/MenuItem\"\nimport EditIcon from \"@mui/icons-material/Edit\"\nimport GridActionsSettingsMenuDialogItem from \"./GridActionsSettingsMenuDialogItem.tsx\"\nimport DeleteIcon from \"@mui/icons-material/DeleteOutlined\"\nimport PersonOffIcon from \"@mui/icons-material/PersonOff\"\n\ntype GridActionsSettingsMenuProps = {\n  handleDeleteClick: () => void\n  handleEditClick: () => void\n  handleWipeOutRunnersClick: () => void\n  handleStatsClick: () => void\n}\n\nconst GridActionsSettingsMenu: React.FC<GridActionsSettingsMenuProps> = ({\n  handleDeleteClick,\n  handleEditClick,\n  handleWipeOutRunnersClick,\n}) => {\n  const { t } = useTranslation()\n\n  // Menu functions\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl)\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  return (\n    <>\n      <Tooltip title={t(\"Settings\")}>\n        <GridActionsCellItem\n          icon={<SettingsIcon />}\n          label={\"Settings\"}\n          className=\"textPrimary\"\n          color=\"inherit\"\n          onClick={handleClick}\n        />\n      </Tooltip>\n      <Menu id={\"options\"} anchorEl={anchorEl} open={open} onClose={handleClose}>\n        <MenuItem onClick={handleEditClick}>\n          <ListItemIcon>\n            <EditIcon />\n          </ListItemIcon>\n          <ListItemText>{t(\"Edit\")}</ListItemText>\n        </MenuItem>\n        <Divider />\n        <GridActionsSettingsMenuDialogItem\n          icon={<PersonOffIcon />}\n          menuText={t(\"EventAdmin.Stages.WipeOutRunners.MenuText\")}\n          action={() => {\n            handleClose()\n            handleWipeOutRunnersClick()\n          }}\n          menuCloseAction={handleClose}\n          dialogTitle={t(\"EventAdmin.Stages.WipeOutRunners.DialogTitle\")}\n          dialogBody={t(\"EventAdmin.Stages.WipeOutRunners.DialogBody\")}\n          dialogCancelButtonText={t(\"Cancel\")}\n          dialogConfirmButtonText={t(\"EventAdmin.Stages.WipeOutRunners.DialogConfirm\")}\n        />\n        <GridActionsSettingsMenuDialogItem\n          icon={<DeleteIcon />}\n          menuText={t(\"EventAdmin.Stages.DeleteStage.MenuText\")}\n          action={() => {\n            handleDeleteClick()\n            handleClose()\n          }}\n          menuCloseAction={handleClose}\n          dialogTitle={t(\"EventAdmin.Stages.DeleteStage.DialogTitle\")}\n          dialogBody={t(\"EventAdmin.Stages.DeleteStage.DialogBody\")}\n          dialogCancelButtonText={t(\"Cancel\")}\n          dialogConfirmButtonText={t(\"Delete\")}\n        />\n      </Menu>\n    </>\n  )\n}\n\nexport default GridActionsSettingsMenu\n","import { Gender } from \"./Gender.ts\"\n\nexport const CATEGORY_OFFICIAL_SUB20 = \"officialSub20\"\nexport const CATEGORY_OFFICIAL_SENIOR = \"officialSenior\"\nexport const CATEGORY_OTHERS = \"others\"\n\nexport type CategoryName =\n  | typeof CATEGORY_OFFICIAL_SUB20\n  | typeof CATEGORY_OFFICIAL_SENIOR\n  | typeof CATEGORY_OTHERS\n\nexport type CategoryData = Record<\n  Gender,\n  {\n    total: number\n    dns: number\n    mp: number\n    dnf: number\n    ot: number\n    dqf: number\n    notYetFinished: number\n    finished: number\n    others: number\n  }\n>\n\nexport type ApiStats = Record<CategoryName, CategoryData>\n","export const GENDERS = [\"M\", \"F\"] as const\nexport type Gender = (typeof GENDERS)[number]\n","import { ProcessedStats, StatsTable } from \"../models/ProcessedStats.ts\"\nimport {\n  CATEGORY_OFFICIAL_SENIOR,\n  CATEGORY_OFFICIAL_SUB20,\n  CATEGORY_OTHERS,\n  CategoryData,\n  CategoryName,\n  ApiStats,\n} from \"../models/ApiStats.ts\"\nimport { Gender, GENDERS } from \"../models/Gender.ts\"\n\nfunction getGenders(categoryData: CategoryData): Gender[] {\n  return Object.keys(categoryData).filter((key) => GENDERS.includes(key as Gender)) as Gender[]\n}\n\nfunction processData(data: ApiStats): ProcessedStats {\n  const result: ProcessedStats = {\n    table1: {},\n    table2: {},\n  }\n\n  const rowsTable1 = [\n    \"1 Inscritos totales\",\n    \"2 Inscritos totales cat. <SUB-20\",\n    \"3 Inscritos totales cat. >SUB-20\",\n    \"4 No salen\",\n    \"5 Error en tarjeta\",\n    \"6 Abandonan\",\n    \"7 Fuera de control\",\n    \"8 Descalificados\",\n  ]\n\n  const rowsTable2 = [\n    \"1 Inscritos totales\",\n    \"2 No salen\",\n    \"3 Error en tarjeta\",\n    \"4 Abandonan\",\n    \"5 Fuera de control\",\n    \"6 Descalificados\",\n  ]\n\n  const initTable = (rows: string[]): StatsTable =>\n    Object.fromEntries(rows.map((row) => [row, { M: 0, F: 0, total: 0 }])) as StatsTable\n\n  result.table1 = initTable(rowsTable1)\n  result.table2 = initTable(rowsTable2)\n\n  const officialCategories: CategoryName[] = [CATEGORY_OFFICIAL_SUB20, CATEGORY_OFFICIAL_SENIOR]\n\n  // Process official categories\n  for (const categoryName of officialCategories) {\n    const categoryData = data[categoryName]\n    const genders = getGenders(categoryData)\n\n    for (const gender of genders) {\n      const cat = categoryData[gender]\n\n      // General totals\n      result.table1[rowsTable1[0]][gender] += cat.total\n\n      // Sub-totals for categories\n      if (categoryName === CATEGORY_OFFICIAL_SUB20) {\n        result.table1[rowsTable1[1]][gender] += cat.total\n      } else if (categoryName === CATEGORY_OFFICIAL_SENIOR) {\n        result.table1[rowsTable1[2]][gender] += cat.total\n      }\n\n      // Common fields\n      result.table1[rowsTable1[3]][gender] += cat.dns\n      result.table1[rowsTable1[4]][gender] += cat.mp\n      result.table1[rowsTable1[5]][gender] += cat.dnf\n      result.table1[rowsTable1[6]][gender] += cat.ot\n      result.table1[rowsTable1[7]][gender] += cat.dqf\n    }\n  }\n\n  // Process non-official (\"others\") category\n  const othersCategory = data[CATEGORY_OTHERS]\n  const othersGenders = getGenders(othersCategory)\n\n  for (const gender of othersGenders) {\n    const cat = othersCategory[gender]\n\n    result.table2[rowsTable2[0]][gender] += cat.total\n    result.table2[rowsTable2[1]][gender] += cat.dns\n    result.table2[rowsTable2[2]][gender] += cat.mp\n    result.table2[rowsTable2[3]][gender] += cat.dnf\n    result.table2[rowsTable2[4]][gender] += cat.ot\n    result.table2[rowsTable2[5]][gender] += cat.dqf\n  }\n\n  // Totals\n  const calculateTotals = (table: StatsTable): void => {\n    for (const row of Object.keys(table)) {\n      table[row].total = table[row].M + table[row].F\n    }\n  }\n\n  calculateTotals(result.table1)\n  calculateTotals(result.table2)\n\n  return result\n}\n\nfunction formatAsTxtTables(result: ProcessedStats): string {\n  const newLine = \"\\n\"\n  const sep = \";\"\n  const formatTable = (tableName: string, tableData: StatsTable): string => {\n    let md = `${sep} ${tableName} ${sep} M ${sep} F ${sep} Total ${sep}${newLine}`\n    md += `${sep}-----------${sep}---${sep}---${sep}-------${sep}` + newLine\n\n    for (const [rowName, values] of Object.entries(tableData)) {\n      md += `${sep} ${rowName} ${sep} ${values.M} ${sep} ${values.F} ${sep} ${values.total} ${sep}${newLine}`\n    }\n\n    md += newLine\n    return md\n  }\n\n  let markdown = \"\"\n  markdown += formatTable(\"OFICIAL\", result.table1)\n  markdown += formatTable(\"NO OFICIAL\", result.table2)\n\n  return markdown\n}\n\nfunction formatAsHtmlTables(result: ProcessedStats): string {\n  const escapeHtml = (unsafe: string) => {\n    return unsafe\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\")\n  }\n  const formatTable = (tableName: string, tableData: StatsTable): string => {\n    let md = `<table border=\"1\"><tbody><tr><td> ${tableName} </td><td> M </td><td> F </td><td> Total </td></tr>`\n    // md += '<tr><td>-----------</td><td>---</td><td>---</td><td>-------</td><td>';\n\n    for (const [rowName, values] of Object.entries(tableData)) {\n      md += `<tr><td> ${escapeHtml(rowName)} </td><td> ${values.M} </td><td> ${values.F} </td><td> ${values.total} </td></tr>`\n    }\n\n    md += \"</tbody></table></br>\"\n    return md\n  }\n\n  let html = \"\"\n  html += formatTable(\"OFICIAL\", result.table1)\n  html += formatTable(\"NO OFICIAL\", result.table2)\n\n  return html\n}\n\nexport const stageStatsService = {\n  processData,\n  formatAsTxtTables,\n  formatAsHtmlTables,\n}\n","import Box from \"@mui/material/Box\"\nimport Button from \"@mui/material/Button\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport SaveIcon from \"@mui/icons-material/Save\"\nimport CancelIcon from \"@mui/icons-material/Close\"\nimport {\n  GridRowsProp,\n  GridRowModesModel,\n  GridRowModes,\n  DataGrid,\n  GridColDef,\n  GridActionsCellItem,\n  GridEventListener,\n  GridRowModel,\n  GridRowEditStopReasons,\n  GridRowParams,\n  GridToolbarProps,\n} from \"@mui/x-data-grid\"\nimport { useTranslation } from \"react-i18next\"\nimport React, { useState } from \"react\"\nimport {\n  deleteStage,\n  getEventStats,\n  patchStage,\n  postStage,\n  wipeOutStage,\n} from \"../../../../../services/EventAdminService.ts\"\nimport Tooltip from \"@mui/material/Tooltip\"\nimport { EventDetailModel } from \"../../../../../../../shared/EntityTypes.ts\"\nimport { useAuth } from \"../../../../../../../shared/hooks.ts\"\nimport { stageTypes } from \"../../../../../../../shared/Constants.ts\"\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\"\nimport GridActionsSettingsMenu from \"./GridActionsSettingsMenu.tsx\"\nimport { useNotifications } from \"@toolpad/core/useNotifications\"\nimport { stageStatsService } from \"../../../../../../../domain/services/StageStatsService.ts\"\nimport { useNavigate } from \"react-router-dom\"\nimport { Toolbar } from \"@mui/material\"\n\n/**\n * Auxiliary component to introduce buttons on top of the DataGrid\n */\ninterface EditToolbarProps extends GridToolbarProps {\n  setRows: React.Dispatch<React.SetStateAction<GridRowsProp>>\n  setRowModesModel: React.Dispatch<React.SetStateAction<GridRowModesModel>>\n}\nfunction EditToolbar(props: EditToolbarProps) {\n  const { t } = useTranslation()\n  const { setRows, setRowModesModel } = props\n\n  const handleClick = () => {\n    const id = `new-${Math.random().toString(36).substring(2, 9)}`\n    setRows((oldRows) => [...oldRows, { id: id, stageName: \"\", isNew: true, isEdit: false }])\n    setRowModesModel((oldModel) => ({\n      ...oldModel,\n      [id]: { mode: GridRowModes.Edit, fieldToFocus: \"name\" },\n    }))\n  }\n\n  return (\n    <Toolbar>\n      <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\n        {t(\"EventAdmin.Stages.NewStage\")}\n      </Button>\n    </Toolbar>\n  )\n}\n\n/**\n * Props for StagesDataGrid\n */\ninterface Props {\n  eventDetail: EventDetailModel\n}\n\n/**\n * Possible properties of a row in the stages DataGrid\n */\nexport interface StageRow {\n  id: string\n  stageId: string\n  stageName: string\n  stageTypeId: string\n  isNew?: boolean\n  isEdit?: boolean\n}\n\nexport default function StagesDataGrid(props: Props) {\n  const { t } = useTranslation()\n  const { token } = useAuth()\n  const notifications = useNotifications()\n  const navigate = useNavigate()\n\n  const initialRows: GridRowsProp<StageRow> = props.eventDetail.stages.map((stage) => ({\n    id: stage.id,\n    stageId: stage.id,\n    stageName: stage.description,\n    stageTypeId: stage.stage_type.id,\n  }))\n\n  const [rows, setRows] = useState(initialRows)\n  const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({})\n\n  const handleRowEditStop: GridEventListener<\"rowEditStop\"> = (params, event) => {\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\n      event.defaultMuiPrevented = true\n    }\n  }\n\n  const handleEditClick = (row: GridRowParams<StageRow>) => {\n    setRowModesModel({ ...rowModesModel, [row.id]: { mode: GridRowModes.Edit } })\n  }\n\n  const handleSaveClick = (row: GridRowParams<StageRow>) => () => {\n    setRowModesModel({ ...rowModesModel, [row.id]: { mode: GridRowModes.View } })\n  }\n\n  const handleDeleteClick = async (row: GridRowParams<StageRow>) => {\n    await deleteStage(props.eventDetail.id, row.row.stageId, token as string).then(() =>\n      setRows(rows.filter((thisRow) => thisRow.id !== row.id)),\n    )\n  }\n\n  const handleStatsClick = async (row: GridRowParams<StageRow>) => {\n    try {\n      const res = await getEventStats(props.eventDetail.id, row.row.stageId)\n      const dataProcessed = stageStatsService.processData(res.data)\n      const txtTable = stageStatsService.formatAsTxtTables(dataProcessed)\n      const htmlTable = stageStatsService.formatAsHtmlTables(dataProcessed)\n      await navigator.clipboard.writeText(txtTable)\n      notifications.show(\n        <span\n          dangerouslySetInnerHTML={{ __html: t(\"Copied to the clipboard\") + \"</br>\" + htmlTable }}\n        />,\n        {\n          autoHideDuration: 15000,\n          severity: \"success\",\n        },\n      )\n    } catch (e) {\n      notifications.show(\"Error\", {\n        autoHideDuration: 3000,\n        severity: \"error\",\n      })\n    }\n  }\n\n  const handleWipeOutRunnersClick = async (row: GridRowParams<StageRow>) => {\n    try {\n      const resetNotification = notifications.show(t(\"Loading\"), {\n        autoHideDuration: 30000,\n        severity: \"info\", // Could be 'success', 'error', 'warning', 'info'.\n      })\n      await wipeOutStage(props.eventDetail.id, row.row.stageId, token as string).then(() => {})\n      notifications.close(resetNotification)\n      notifications.show(t(\"Success\"), {\n        autoHideDuration: 3000,\n        severity: \"success\", // Could be 'success', 'error', 'warning', 'info'.\n      })\n    } catch (e) {\n      notifications.show(\"An error occurred resetting the event.\", {\n        autoHideDuration: 3000,\n        severity: \"error\", // Could be 'success', 'error', 'warning', 'info'.\n      })\n    }\n  }\n\n  const handleCancelClick = (row: GridRowParams<StageRow>) => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [row.id]: { mode: GridRowModes.View, ignoreModifications: true },\n    })\n\n    const editedRow = rows.find((thisRow) => thisRow.id === row.id)\n    if (editedRow!.isNew) {\n      setRows(rows.filter((thisRow) => thisRow.id !== row.id))\n    }\n  }\n\n  const processRowUpdate = async (newRow: GridRowModel<StageRow>) => {\n    const updatedRow: GridRowModel<StageRow> = { ...newRow, isEdit: false, isNew: false }\n    if (newRow.isNew) {\n      // Case row is posted to the server\n      try {\n        const response = await postStage(\n          props.eventDetail.id,\n          newRow.stageName,\n          newRow.stageTypeId,\n          token,\n        )\n        updatedRow.id = response.data.id\n        updatedRow.stageId = response.data.id\n      } catch (error) {\n        console.error(\"Something bad happened while posting the stage: \", error)\n      }\n    } // Case Row is patched to the server\n    else {\n      try {\n        await patchStage(\n          props.eventDetail.id,\n          newRow.stageId,\n          newRow.stageName,\n          newRow.stageTypeId,\n          token as string,\n        )\n      } catch (error) {\n        console.error(\"Something bad happened while updating the stage: \", error)\n      }\n    }\n\n    // Update DataGridView\n    console.log(rows)\n    setRows(\n      rows.map(\n        (row): GridRowModel<StageRow> =>\n          row.id === newRow.id || row.id == \"newlyCreatedStage\" ? updatedRow : row,\n      ),\n    )\n    return updatedRow\n  }\n\n  const handleRowModesModelChange = (newRowModesModel: GridRowModesModel) => {\n    setRowModesModel(newRowModesModel)\n  }\n\n  const columns: GridColDef[] = [\n    {\n      field: \"stageName\",\n      headerName: t(\"Name\"),\n      flex: 1,\n      type: \"string\",\n      align: \"left\",\n      headerAlign: \"left\",\n      editable: true,\n    },\n    {\n      field: \"stageTypeId\",\n      headerName: t(\"EventAdmin.Stages.StagesTypes.StageType\"),\n      width: 150,\n      type: \"singleSelect\",\n      valueOptions: stageTypes.map((item: { value: string; label: string }) => {\n        const label: string = t(`EventAdmin.Stages.StagesTypes.${item.label}`)\n        return { value: item.value, label: label }\n      }), //Object.keys(stageTypesId),\n      align: \"left\",\n      headerAlign: \"left\",\n      editable: true,\n    },\n    {\n      field: \"actions\",\n      type: \"actions\",\n      headerName: \"\",\n      width: 100,\n      cellClassName: \"actions\",\n      getActions: (row: GridRowParams<StageRow>) => {\n        const isInEditMode = rowModesModel[row.id]?.mode === GridRowModes.Edit\n\n        if (isInEditMode) {\n          return [\n            <Tooltip title={t(\"Save\")}>\n              <GridActionsCellItem\n                icon={<SaveIcon />}\n                label=\"Save\"\n                sx={{\n                  color: \"primary.main\",\n                }}\n                onClick={handleSaveClick(row)}\n              />\n            </Tooltip>,\n            <Tooltip title={t(\"Cancel\")}>\n              <GridActionsCellItem\n                icon={<CancelIcon />}\n                label=\"Cancel\"\n                className=\"textPrimary\"\n                onClick={handleCancelClick(row)}\n                color=\"inherit\"\n              />\n            </Tooltip>,\n          ]\n        }\n\n        return [\n          <GridActionsSettingsMenu\n            handleEditClick={() => handleEditClick(row)}\n            handleDeleteClick={() => void handleDeleteClick(row)}\n            handleStatsClick={() => void handleStatsClick(row)}\n            handleWipeOutRunnersClick={() => void handleWipeOutRunnersClick(row)}\n          />,\n          <Tooltip title={t(\"EventAdmin.Stages.GoToStage\")}>\n            <GridActionsCellItem\n              icon={<ArrowForwardIcon />}\n              label=\"View\"\n              className=\"textPrimary\"\n              color=\"inherit\"\n              onClick={() => {\n                void navigate(`/competitions/${props.eventDetail.id}/${row.row.stageId}`)\n              }}\n            />\n          </Tooltip>,\n        ]\n      },\n    },\n  ]\n\n  return (\n    <Box\n      sx={{\n        minHeight: 200,\n        maxHeight: 500,\n        width: \"100%\",\n        \"& .actions\": {\n          color: \"text.secondary\",\n        },\n        \"& .textPrimary\": {\n          color: \"text.primary\",\n        },\n      }}\n    >\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        editMode=\"row\"\n        rowModesModel={rowModesModel}\n        onRowModesModelChange={handleRowModesModelChange}\n        onRowEditStop={handleRowEditStop}\n        processRowUpdate={processRowUpdate}\n        slots={{\n          // @ts-expect-error TS2322 This is a custom component with extra props\n          toolbar: EditToolbar,\n        }}\n        slotProps={{\n          // @ts-expect-error TS2353 the custom component contains extra props\n          toolbar: { setRows, setRowModesModel },\n        }}\n      />\n    </Box>\n  )\n}\n","import { IconButton } from \"@mui/material\"\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\"\nimport Tooltip from \"@mui/material/Tooltip\"\nimport { useTranslation } from \"react-i18next\"\nimport { useNotifications } from \"@toolpad/core/useNotifications\"\n\n/**\n * Props of CopyToClipBoardButton\n * value: value to be copied\n */\nexport interface CopyToClipBoardButtonParams {\n  value: string\n}\n\n/**\n * Button to copy content to the clipboard with snackbar\n * @prop value: Value to be copied\n */\nexport function CopyToClipBoardButton(props: CopyToClipBoardButtonParams) {\n  const { t } = useTranslation()\n  const notifications = useNotifications()\n\n  const handleClick = () => {\n    void navigator.clipboard.writeText(props.value)\n    notifications.show(t(\"Copied to the clipboard\"), {\n      autoHideDuration: 5000,\n      severity: \"success\",\n    })\n  }\n\n  return (\n    <>\n      <Tooltip title={t(\"Copy\")}>\n        <IconButton onClick={handleClick}>\n          <ContentCopyIcon />\n        </IconButton>\n      </Tooltip>\n    </>\n  )\n}\n","import { useTranslation } from \"react-i18next\"\nimport { useState } from \"react\"\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n} from \"@mui/material\"\nimport Tooltip from \"@mui/material/Tooltip\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport AutorenewIcon from \"@mui/icons-material/Autorenew\"\nimport { CopyToClipBoardButton } from \"../../../../../../../shared/Components.tsx\"\n\ninterface RefreshButtonParams {\n  handleRenewToken: () => void\n  eventToken: string\n  eventId: string\n}\n\nexport default function RefreshButton(props: RefreshButtonParams) {\n  const { t } = useTranslation()\n  const [isDialogOpen, setIsDialogOpen] = useState<boolean>(false)\n  const handleClose = () => {\n    setIsDialogOpen(false)\n  }\n  const handleRenewAndClose = () => {\n    props.handleRenewToken()\n    setIsDialogOpen(false)\n  }\n\n  return (\n    <>\n      {props.eventToken == \"\" ? (\n        <IconButton>\n          <Tooltip title={t(\"EventAdmin.Create security keys\")}>\n            <AddIcon onClick={() => props.handleRenewToken()} />\n          </Tooltip>\n        </IconButton>\n      ) : (\n        <>\n          <IconButton>\n            <Tooltip title={t(\"EventAdmin.Renew security keys\")}>\n              <AutorenewIcon onClick={() => setIsDialogOpen(true)} />\n            </Tooltip>\n          </IconButton>\n          <CopyToClipBoardButton value={`${props.eventId}${props.eventToken}`} />\n        </>\n      )}\n      <Dialog open={isDialogOpen} onClose={handleClose}>\n        <DialogTitle id=\"alert-dialog-title\">\n          {t(\"EventAdmin.Do you want to renew the security key?\")}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {t(\"EventAdmin.RenewEventTokenMsg\")}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"outlined\" onClick={handleClose}>\n            {t(\"Cancel\")}\n          </Button>\n          <Button variant=\"contained\" onClick={handleRenewAndClose} autoFocus>\n            {t(\"EventAdmin.Renew\")}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport {\n  getEventToken,\n  invalidateEventToken,\n  postEventToken,\n} from \"../../../../../services/EventAdminService.ts\"\nimport { Container, Grid, TextField } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\nimport { useAuth } from \"../../../../../../../shared/hooks.ts\"\nimport { DateTime } from \"luxon\"\nimport RefreshButton from \"./RefreshButton.tsx\"\n\ninterface Props {\n  event_id: string\n}\n\nexport default function EventTokenDataGrid(props: Props) {\n  const { token } = useAuth()\n  const { t } = useTranslation()\n  const [eventToken, setEventToken] = useState<string>(\"\")\n  const [eventTokenExpireDate, setEventTokenExpireDate] = useState<DateTime | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    const getResponse = getEventToken(props.event_id, token)\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    getResponse.then((response) => {\n      // Check if there are security tokens\n      if (response.data.length > 0) {\n        setEventToken(response.data[0].token)\n        setEventTokenExpireDate(DateTime.fromISO(response.data[0].expires))\n      }\n      setIsLoading(false)\n\n      return () => setIsLoading(true)\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  const handleRenewToken = () => {\n    void handleRenewToken2()\n  }\n  const handleRenewToken2 = async () => {\n    setIsLoading(true)\n    if (eventToken != \"\") {\n      try {\n        await invalidateEventToken(props.event_id, eventToken, token as string)\n      } catch (error) {\n        console.log(\"Error in invalidateEventToken\", error)\n        setIsLoading(false)\n      }\n    }\n    try {\n      const response = await postEventToken(props.event_id, token as string)\n      setEventToken(response.data.token)\n      setEventTokenExpireDate(DateTime.fromISO(response.data.expires))\n      setIsLoading(false)\n    } catch (error) {\n      console.log(\"error in postEventToken\", error)\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Container component=\"form\" disableGutters>\n      <Grid\n        container\n        spacing={2}\n        sx={{\n          marginY: \"2em\",\n        }}\n      >\n        <Grid item xs={12} md={8}>\n          <TextField\n            fullWidth\n            id=\"securityToken\"\n            name=\"securityToken\"\n            label={t(\"EventAdmin.EventSecurityTokens\")}\n            value={isLoading ? t(\"Loading\") : eventToken ? `${props.event_id}${eventToken}` : \"\"}\n            disabled\n            InputProps={{\n              endAdornment: (\n                <RefreshButton\n                  eventToken={eventToken || \"\"}\n                  handleRenewToken={handleRenewToken}\n                  eventId={props.event_id}\n                />\n              ),\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <TextField\n            fullWidth\n            id=\"tokenExpiracyDate\"\n            name=\"token expiry date\"\n            error={eventTokenExpireDate ? eventTokenExpireDate < DateTime.now() : false}\n            disabled\n            label={t(\"EventAdmin.EventSecurityTokensExpireDate\")}\n            value={\n              isLoading\n                ? t(\"Loading\")\n                : eventTokenExpireDate\n                  ? eventTokenExpireDate.toLocaleString(DateTime.DATE_SHORT)\n                  : \"\"\n            }\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n","import { useState } from \"react\"\nimport DeleteIcon from \"@mui/icons-material/DeleteOutlined\"\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\nimport { deleteEvent } from \"../../../../../services/EventAdminService.ts\"\nimport { useNavigate } from \"react-router-dom\"\nimport { EventDetailModel } from \"../../../../../../../shared/EntityTypes.ts\"\nimport { useAuth } from \"../../../../../../../shared/hooks.ts\"\nimport { useNotifications } from \"@toolpad/core/useNotifications\"\n\ninterface DeleteEventButtonProps {\n  event: EventDetailModel\n}\n\nexport default function DeleteEventButton(props: DeleteEventButtonProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const navigate = useNavigate()\n  const { token } = useAuth()\n  const notifications = useNotifications()\n\n  const handleClose = () => {\n    setIsOpen(false)\n  }\n\n  const handleDeleteEvent = async () => {\n    try {\n      await deleteEvent(props.event.id, token)\n      await navigate(\"/dashboard\")\n    } catch (error) {\n      notifications.show(\"An error occurred deleting the event.\", {\n        autoHideDuration: 3000,\n        severity: \"error\", // Could be 'success', 'error', 'warning', 'info'.\n      })\n      console.log(\"error in deleting the event \", error)\n    }\n  }\n\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        color=\"error\"\n        startIcon={<DeleteIcon />}\n        onClick={() => setIsOpen(true)}\n      >\n        {t(\"EventAdmin.DeleteEvent\")}\n      </Button>\n      <Dialog\n        open={isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {t(\"EventAdmin.Do you want to delete this event?\")}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {t(\"This action cannot be undone\")}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"outlined\" onClick={handleClose}>\n            {t(\"Cancel\")}\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={() => void handleDeleteEvent()}\n            color=\"error\"\n            autoFocus\n          >\n            {t(\"Delete\")}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n","import { useParams } from \"react-router-dom\"\nimport { ProcessedRunnerModel } from \"../pages/Results/components/VirtualTicket/shared/EntityTypes.ts\"\n\n/**\n * Paginated list from backend\n */\nexport interface Page<T> {\n  data: T[]\n  total: number\n  limit: number\n}\n\n/**\n * Single element from Backend encapsulated in data\n */\nexport interface Data<T> {\n  data: T\n}\n\n/**\n * useParams hook adding casting to the desired type. This removes the possibility of params being\n * null. It can be safely used when the params are mandatory\n */\nexport function useRequiredParams<T>() {\n  return useParams() as T\n}\n\nexport interface EventModel {\n  id: string\n  description: string\n  is_hidden: boolean\n  picture: string | null\n  website: string | null\n  scope: null\n  location: string | null\n  initial_date: string\n  final_date: string\n  federation_id: string\n  created: string\n  modified: string\n  organizer: OrganizerModel\n}\n\nexport interface EventDetailModel {\n  id: string\n  is_hidden: boolean\n  description: string\n  picture: string\n  website: string\n  scope: string\n  location: string\n  initial_date: string\n  final_date: string\n  federation_id: string\n  created: string\n  modified: string\n  federation: FederationModel\n  stages: StageModel[]\n  organizer: OrganizerModel | null\n}\n\nexport interface StageTypeModel {\n  id: string\n  description:\n    | \"Chase Start\"\n    | \"Foot-O, MTBO, Ski-O\"\n    | \"Rogaine\"\n    | \"Relay\"\n    | \"Raid\"\n    | \"Mass Start\"\n    | \"Trail-O\"\n}\n\nexport enum StateLogConst {\n  CLEAR = 0,\n  START = 1,\n  RESULT = 2,\n  ENDED = 3,\n}\n\nexport interface StateLog {\n  state: StateLogConst\n  created: string\n}\n\nexport interface StageModel {\n  id: string\n  description: string\n  last_logs: StateLog[]\n  stage_type: StageTypeModel\n}\n\nexport interface FederationModel {\n  id: string\n  description: string\n}\n\nexport interface OrganizerModel {\n  id: string\n  name: string\n  country: string\n  region: string\n}\n\nexport interface ParticipantModel {\n  id: string\n  full_name: string\n  sex?: string\n  bib_number: string\n  is_nc: boolean\n  eligibility: string | null\n  sicard?: string | null\n  leg_number?: number\n  class: ClassModel | null\n  club: ClubModel | null\n  stage: RunnerResultModel\n  overalls: OverallsModel | null\n}\n\nexport interface TeamRunner extends ParticipantModel {\n  leg_number: number\n}\n\nexport interface RunnerModel extends ParticipantModel {\n  class: ClassModel\n  runners?: TeamRunner[] | null\n}\n\n// Todo: Fusion RunnerResultModel and OverallModel\nexport interface RunnerResultModel {\n  id: string\n  result_type_id: string\n  start_time: string | null\n  finish_time: string | null\n  upload_type: string\n  time_seconds: number\n  position: number\n  status_code: string | null\n  time_behind: number\n  time_neutralization: number\n  time_adjusted: number\n  time_penalty: number\n  time_bonus: number\n  points_final: number\n  points_adjusted: number\n  points_penalty: number\n  points_bonus: number\n  leg_number?: number\n  splits: SplitModel[]\n}\n\nexport interface SplitModel {\n  id: string\n  is_intermediate: boolean\n  reading_time: string | null\n  order_number: number | null\n  points: number | null\n  control: ControlModel\n}\n\nexport interface OnlineControlModel {\n  id: string\n  station: string\n}\n\nexport interface ControlModel {\n  id: string\n  station: string\n  control_type: ControlTypeModel\n}\n\nexport interface ControlTypeModel {\n  id: string\n  description: string\n}\n\nexport interface ClassModel {\n  id: string\n  short_name: string\n  long_name: string\n}\n\nexport interface StageClassModel extends ClassModel {\n  splits: OnlineControlModel[]\n}\n\nexport interface ClubModel {\n  id: string\n  short_name: string\n}\n\nexport interface OverallsModel {\n  parts: OverallModel[]\n  overall: OverallModel\n}\n\nexport interface StageOrder {\n  id: string\n  description: string\n}\n\nexport interface OverallModel {\n  id: string\n  stage_order: number | null\n  upload_type: string\n  stage?: StageOrder | null\n  position: number | null\n  time_seconds: number | null\n  points_final: number | null\n  note: string | null\n}\n\nexport interface UserModel {\n  id: string\n  email: string\n  first_name: string\n  last_name: string\n  created: string\n  modified: string\n  token: {\n    access_token: string\n    token_type: string\n  }\n}\n\nexport interface UserEvent {\n  id: string\n  email: string\n  first_name: string\n  last_name: string\n  created: string\n  modified: string\n}\n\nexport interface PostEventResponse {\n  id: string\n  description: string\n  initial_date: string\n  final_date: string\n  users: UserEvent[]\n}\n\nexport interface PostStageResponse {\n  id: string\n  description: string\n  stage_type: StageModel\n}\n\nexport interface PostEventTokenResponse {\n  id: string\n  expires: string\n  token: string\n}\n\nexport interface GetEventTokenResponse {\n  token: string\n  expires: string\n  created: string\n}\n\nexport interface RunnerState {\n  runner: ProcessedRunnerModel\n  statusCode: string\n  hasStarted: boolean\n  isFinished: boolean\n  position: number\n  currentRaceTime: number\n  lastPassedControl: number\n  lastPassedTime: number | null\n  controlTimes: Record<number, number>\n}\n","import EventAdminForm from \"../../components/EventAdminForm.tsx\"\nimport { Alert, AlertTitle, Box, Container, Typography } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\nimport StagesDataGrid from \"./components/StagesDataGrid.tsx\"\nimport EventTokenDataGrid from \"./components/EventTokenDataGrid.tsx\"\nimport DeleteEventButton from \"./components/DeleteEventButton.tsx\"\nimport React, { useState } from \"react\"\nimport { patchEvent } from \"../../../../services/EventAdminService.ts\"\nimport { DateTime } from \"luxon\"\nimport { EventDetailModel, useRequiredParams } from \"../../../../../../shared/EntityTypes.ts\"\nimport { useAuth } from \"../../../../../../shared/hooks.ts\"\nimport GeneralSuspenseFallback from \"../../../../../../components/GeneralSuspenseFallback.tsx\"\nimport GeneralErrorFallback from \"../../../../../../components/GeneralErrorFallback.tsx\"\nimport { useFetchEventDetail } from \"../../../../../Results/services/FetchHooks.ts\"\nimport NotFoundPage from \"../../../../../NotFoundError/NotFoundPage.tsx\"\nimport { apiErrorService } from \"../../../../../../domain/services/ApiErrorService.ts\"\nimport { useNotifications } from \"@toolpad/core/useNotifications\"\n\nexport default function EventAdmin() {\n  const notifications = useNotifications()\n  const { eventId } = useRequiredParams<{ eventId: string }>()\n  const { data: eventData, error, isError, isLoading } = useFetchEventDetail(eventId)\n  const detail = eventData?.data\n  const { t } = useTranslation()\n  const { token } = useAuth()\n\n  // Functions to handle Event update\n  const [isEventEditing, setIsEventEditing] = useState<boolean>(false)\n  const handleUpdateEvent = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    const data = new FormData(event.currentTarget)\n    try {\n      await patchEvent(\n        eventId,\n        data.get(\"description\") as string,\n        DateTime.fromFormat(data.get(\"startDate\") as string, \"dd/MM/yyyy\").toSQLDate() as string,\n        DateTime.fromFormat(data.get(\"endDate\") as string, \"dd/MM/yyyy\").toSQLDate() as string,\n        data.get(\"scope\") as string,\n        !!data.get(\"isPublic\"),\n        token as string,\n        data.get(\"website\") ? (data.get(\"website\") as string) : undefined,\n        undefined,\n        data.get(\"organizerId\") ? (data.get(\"organizerId\") as string) : undefined,\n      )\n      setIsEventEditing(false)\n    } catch (e) {\n      notifications.show(\"Edit event failed. \" + apiErrorService.toString(e), {\n        autoHideDuration: 3000,\n        severity: \"error\", // Could be 'success', 'error', 'warning', 'info'.\n      })\n    }\n  }\n\n  const handleCancelEditingEvent = () => {\n    setIsEventEditing(false)\n    //BUG, return to previous state\n  }\n\n  const handleClickEditEvent = () => setIsEventEditing(true)\n\n  if (isLoading) {\n    return <GeneralSuspenseFallback />\n  } else if (isError) {\n    const error_status = error.response?.status\n    if (error_status == 404) {\n      return <NotFoundPage />\n    } else if (error_status == 403) {\n      return (\n        <Alert severity={\"error\"} variant={\"outlined\"} sx={{ margin: 5 }}>\n          <AlertTitle>{t(\"ForbiddenAccess\")}</AlertTitle>\n        </Alert>\n      )\n    }\n\n    return <GeneralErrorFallback />\n  } else {\n    return (\n      <Container>\n        <Box sx={{ marginY: \"2em\" }}>\n          <Typography variant={\"h3\"}>{t(\"EventAdmin.EventData\")}</Typography>\n          <EventAdminForm\n            eventDetail={detail as EventDetailModel}\n            handleCancel={handleCancelEditingEvent}\n            handleEdit={handleClickEditEvent}\n            handleSubmit={(evt) => void handleUpdateEvent(evt)}\n            canEdit={isEventEditing}\n          />\n        </Box>\n        <Box sx={{ marginY: \"2em\" }}>\n          <Typography variant={\"h3\"}>{t(\"Stages\")}</Typography>\n          {detail ? <StagesDataGrid eventDetail={detail} /> : <></>}\n        </Box>\n        <Box sx={{ marginY: \"2em\" }}>\n          <Typography variant={\"h3\"}>{t(\"EventAdmin.EventSecurityTokens\")}</Typography>\n          <EventTokenDataGrid event_id={detail ? detail.id : \"\"} />\n        </Box>\n        <Box sx={{ marginY: \"12em\" }}>\n          <Typography variant={\"h3\"}>{t(\"EventAdmin.DangerArea\")}</Typography>\n          {detail ? <DeleteEventButton event={detail} /> : <></>}\n        </Box>\n      </Container>\n    )\n  }\n}\n"],"names":["getDialogContentTextUtilityClass","slot","generateUtilityClass","generateUtilityClasses","useUtilityClasses","ownerState","classes","composedClasses","composeClasses","DialogContentTextRoot","styled","Typography","prop","rootShouldForwardProp","props","styles","DialogContentText","React.forwardRef","inProps","ref","useDefaultProps","children","className","clsx","AutorenewIcon","createSvgIcon","_jsx","ContentCopyIcon","DeleteIcon","PersonOffIcon","SettingsIcon","_excluded","_excluded2","GridActionsCellItem","forwardRef","rootProps","useGridRootProps","label","icon","onClick","other","_objectWithoutPropertiesLoose","handleClick","event","_extends","_a","React.cloneElement","closeMenuOnClick","closeMenu","_jsxs","MenuItem","ListItemIcon","stageTypes","STAGE_TYPE_DATABASE_ID","GridActionsSettingsMenuDialogItem","isDialogOpen","setIsDialogOpen","useState","handleClose","useCallback","handleOpen","_Fragment","ListItemText","menuText","Dialog","open","DialogTitle","id","dialogTitle","DialogContent","dialogBody","DialogActions","Button","variant","menuCloseAction","dialogCancelButtonText","action","color","autoFocus","dialogConfirmButtonText","GridActionsSettingsMenu","handleDeleteClick","handleEditClick","handleWipeOutRunnersClick","t","useTranslation","anchorEl","setAnchorEl","Boolean","currentTarget","Tooltip","title","Menu","onClose","EditIcon","Divider","CATEGORY_OFFICIAL_SUB20","CATEGORY_OFFICIAL_SENIOR","CATEGORY_OTHERS","GENDERS","getGenders","categoryData","key","processData","data","result","rowsTable1","rowsTable2","initTable","rows","row","officialCategories","categoryName","genders","gender","cat","othersCategory","othersGenders","calculateTotals","table","formatAsTxtTables","formatTable","tableName","tableData","md","rowName","values","markdown","formatAsHtmlTables","escapeHtml","unsafe","html","stageStatsService","EditToolbar","setRows","setRowModesModel","Toolbar","startIcon","AddIcon","Math","random","toString","substring","oldRows","stageName","isNew","isEdit","oldModel","mode","GridRowModes","Edit","fieldToFocus","StagesDataGrid","token","useAuth","notifications","useNotifications","navigate","useNavigate","initialRows","eventDetail","stages","map","stage","stageId","description","stageTypeId","stage_type","rowModesModel","handleRowEditStop","params","reason","GridRowEditStopReasons","rowFocusOut","defaultMuiPrevented","handleSaveClick","View","deleteStage","then","filter","thisRow","handleStatsClick","res","getEventStats","dataProcessed","txtTable","htmlTable","navigator","clipboard","writeText","show","dangerouslySetInnerHTML","__html","autoHideDuration","severity","resetNotification","wipeOutStage","close","handleCancelClick","ignoreModifications","find","processRowUpdate","newRow","updatedRow","response","postStage","error","console","patchStage","log","handleRowModesModelChange","newRowModesModel","columns","field","headerName","flex","type","align","headerAlign","editable","width","valueOptions","item","value","cellClassName","getActions","SaveIcon","sx","CancelIcon","ArrowForwardIcon","Box","minHeight","maxHeight","DataGrid","editMode","onRowModesModelChange","onRowEditStop","slots","toolbar","slotProps","CopyToClipBoardButton","IconButton","RefreshButton","handleRenewAndClose","handleRenewToken","eventToken","eventId","EventTokenDataGrid","setEventToken","eventTokenExpireDate","setEventTokenExpireDate","isLoading","setIsLoading","useEffect","getEventToken","event_id","length","DateTime","fromISO","expires","handleRenewToken2","invalidateEventToken","postEventToken","Container","component","disableGutters","Grid","container","spacing","marginY","xs","TextField","fullWidth","name","disabled","InputProps","endAdornment","now","toLocaleString","DATE_SHORT","DeleteEventButton","isOpen","setIsOpen","handleDeleteEvent","deleteEvent","useRequiredParams","useParams","EventAdmin","eventData","isError","useFetchEventDetail","detail","isEventEditing","setIsEventEditing","handleUpdateEvent","preventDefault","FormData","patchEvent","get","fromFormat","toSQLDate","undefined","e","apiErrorService","handleCancelEditingEvent","handleClickEditEvent","GeneralSuspenseFallback","error_status","status","NotFoundPage","Alert","margin","AlertTitle","GeneralErrorFallback","EventAdminForm","handleCancel","handleEdit","handleSubmit","evt","canEdit"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}