{"version":3,"file":"Functions-DMzCyz_J.js","sources":["../../src/shared/Functions.tsx"],"sourcesContent":["import i18next from \"i18next\"\nimport { DateTime, Duration } from \"luxon\"\n\nexport function parseDate(dateString: string) {\n  return parseLuxon(dateString).toLocaleString(DateTime.DATE_SHORT)\n}\n\nexport function parseLuxon(dateString: string) {\n  const locale = i18next.language\n  return DateTime.fromISO(dateString, { locale })\n}\n\nexport function parseDateOnlyTime(dateString: string) {\n  return parseLuxon(dateString).toLocaleString(DateTime.TIME_24_SIMPLE)\n}\n\nexport function parseStartTime(dateString: null | string) {\n  if (dateString) {\n    return parseLuxon(dateString).toFormat(\"HH:mm:ss\")\n  } else return null\n}\n\n/**\n * Parse a duration in seconds to MM:SS or HH:MM:SS format\n *\n * @param seconds Duration in seconds\n */\nexport function parseSecondsToMMSS(seconds: number | string): string {\n  // Parse duration\n  seconds = Number(seconds)\n  const duration = Duration.fromObject({ seconds: seconds })\n\n  // Choose HH:MM:SS or MM:SS formats\n  const oneHour = 3600\n  if (seconds < oneHour) {\n    return duration.toFormat(\"mm:ss\")\n  } else {\n    const durationString = duration.toFormat(\"hh:mm:ss\")\n\n    // Remove leading 0\n    if (durationString.at(0) == \"0\") {\n      return durationString.substring(1)\n    } else {\n      return durationString\n    }\n  }\n}\n\n/**\n * Parse a time in seconds to a +/-mm:ss or +/-hh:mm:ss format\n *\n * @param seconds duration in seconds of the time behind\n */\nexport function parseTimeBehind(seconds: number | string): string {\n  // Parse Seconds\n  seconds = Number(seconds)\n\n  // compute sign\n  const sign = seconds < 0 ? \"-\" : \"+\"\n\n  // Parse duration\n  seconds = Math.abs(seconds) // Absolute avoids formating like \"1:-24\" in parseSecondsToMMSS\n  let durationString = parseSecondsToMMSS(seconds)\n\n  // Add + or -\n  durationString = sign + durationString\n\n  // Return\n  return durationString\n}\n"],"names":["parseDate","dateString","parseLuxon","toLocaleString","DateTime","DATE_SHORT","locale","i18next","language","fromISO","parseStartTime","toFormat","parseSecondsToMMSS","seconds","Number","duration","Duration","fromObject","durationString","at","substring","parseTimeBehind","sign","Math","abs"],"mappings":"iYAGO,SAASA,EAAUC,EAAoB,CAC5C,OAAOC,EAAWD,CAAU,EAAEE,eAAeC,EAASC,UAAU,CAClE,CAEO,SAASH,EAAWD,EAAoB,CAC7C,MAAMK,EAASC,EAAQC,SACvB,OAAOJ,EAASK,QAAQR,EAAY,CAAEK,OAAAA,CAAAA,CAAQ,CAChD,CAMO,SAASI,EAAeT,EAA2B,CACxD,OAAIA,EACKC,EAAWD,CAAU,EAAEU,SAAS,UAAU,EACrC,IAChB,CAOO,SAASC,EAAmBC,EAAkC,CAEnEA,EAAUC,OAAOD,CAAO,EACxB,MAAME,EAAWC,EAASC,WAAW,CAAEJ,QAAAA,CAAAA,CAAkB,EAIzD,GAAIA,EADY,KAEd,OAAOE,EAASJ,SAAS,OAAO,EAC3B,CACL,MAAMO,EAAiBH,EAASJ,SAAS,UAAU,EAGnD,OAAIO,EAAeC,GAAG,CAAC,GAAK,IACnBD,EAAeE,UAAU,CAAC,EAE1BF,CAEX,CACF,CAOO,SAASG,EAAgBR,EAAkC,CAEhEA,EAAUC,OAAOD,CAAO,EAGxB,MAAMS,EAAOT,EAAU,EAAI,IAAM,IAGjCA,EAAUU,KAAKC,IAAIX,CAAO,EAC1B,IAAIK,EAAiBN,EAAmBC,CAAO,EAG/CK,OAAAA,EAAiBI,EAAOJ,EAGjBA,CACT"}