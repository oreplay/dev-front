{"version":3,"file":"hooks-CaBBH4u5.js","sources":["../../src/pages/Results/shared/hooks.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\"\nimport { getClassesInStage, getClubsInStage, getEventList } from \"../services/EventService.ts\"\nimport {\n  ClassModel,\n  ClubModel,\n  EventModel,\n  Page,\n  StageClassModel,\n} from \"../../../shared/EntityTypes.ts\"\nimport { useParams, useSearchParams } from \"react-router-dom\"\nimport { useAuth } from \"../../../shared/hooks.ts\"\nimport { useQuery, UseQueryResult } from \"react-query\"\n\nexport function useFetchClasses(): {\n  activeItem: ClassModel | ClubModel | null\n  isClass: boolean\n  classesQuery: UseQueryResult<Page<StageClassModel>>\n  clubsQuery: UseQueryResult<Page<ClubModel>>\n  refresh: () => void\n  setClassClubId: (newItemId: string, isClass: boolean) => void\n} {\n  const { eventId, stageId } = useParams()\n\n  // Associated states\n  const [activeItem, setActiveItem] = useState<ClassModel | ClubModel | null>(null)\n  const [isClass, setIsClass] = useState<boolean>(true)\n\n  // HTTP request\n  const classesQuery = useQuery(\n    [\"classes\", stageId, eventId],\n    () => getClassesInStage(eventId as string, stageId as string),\n    {\n      refetchOnWindowFocus: false,\n    },\n  )\n\n  const clubsQuery = useQuery(\n    [\"clubs\", stageId, eventId],\n    () => getClubsInStage(eventId as string, stageId as string),\n    {\n      refetchOnWindowFocus: false,\n    },\n  )\n\n  const { setClassClubSearchParam, getClassClubSearchParamName } = useClassClubSearchParams()\n\n  const setClassClub = useCallback(\n    (newItemId: string, isClass: boolean): void => {\n      setIsClass(isClass)\n\n      const desiredQuery: UseQueryResult<Page<ClassModel>> | UseQueryResult<Page<ClubModel>> =\n        isClass ? classesQuery : clubsQuery\n      const newItem: ClubModel | ClassModel | undefined = desiredQuery.data?.data.find(\n        (c) => c.id === newItemId,\n      )\n\n      if (newItem) {\n        setActiveItem(newItem)\n        setClassClubSearchParam(newItem, isClass)\n      }\n    },\n    [classesQuery, clubsQuery, setClassClubSearchParam],\n  )\n\n  const hasInitialized = useRef(false)\n  useEffect(() => {\n    if (hasInitialized.current) return\n    if (!classesQuery.data || !clubsQuery.data) return\n    hasInitialized.current = true\n\n    const [itemName, isClassInSearchParams] = getClassClubSearchParamName()\n    if (itemName && isClassInSearchParams !== null) {\n      const item = findClassClub(isClassInSearchParams ? classesQuery : clubsQuery, itemName)\n      if (item) {\n        setIsClass(isClassInSearchParams)\n        setActiveItem(item)\n      }\n    }\n  }, [classesQuery, classesQuery.data, clubsQuery, clubsQuery.data, getClassClubSearchParamName])\n\n  const refresh = useCallback((): void => {\n    void classesQuery.refetch()\n    void clubsQuery.refetch()\n  }, [classesQuery, clubsQuery])\n\n  return {\n    activeItem: activeItem,\n    isClass: isClass,\n    classesQuery: classesQuery,\n    clubsQuery: clubsQuery,\n    refresh: refresh,\n    setClassClubId: setClassClub,\n  }\n}\n\nfunction findClassClub(query: UseQueryResult<Page<ClassModel | ClubModel>>, name: string) {\n  return query.data?.data.find((value) => value.short_name === name)\n}\n\nconst ACTIVE_CLASS_SEARCH_PARAM = \"class\"\nconst ACTIVE_CLUB_SEARCH_PARAM = \"club\"\n\nexport function useClassClubSearchParams(): {\n  setClassClubSearchParam: (newItem: ClassModel | ClubModel, isClass: boolean) => void\n  getClassClubSearchParamName: () => [string | null, boolean | null]\n} {\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  const setClassClubSearchParam = useCallback(\n    (newItem: ClassModel | ClubModel, isClass: boolean) => {\n      if (isClass) {\n        searchParams.set(ACTIVE_CLASS_SEARCH_PARAM, newItem.short_name)\n        searchParams.delete(ACTIVE_CLUB_SEARCH_PARAM)\n      } else {\n        searchParams.delete(ACTIVE_CLASS_SEARCH_PARAM)\n        searchParams.set(ACTIVE_CLUB_SEARCH_PARAM, newItem.short_name)\n      }\n\n      setSearchParams(searchParams, { replace: true })\n    },\n    [searchParams, setSearchParams],\n  )\n\n  const deleteAll = useCallback(() => {\n    searchParams.delete(ACTIVE_CLASS_SEARCH_PARAM)\n    searchParams.delete(ACTIVE_CLUB_SEARCH_PARAM)\n  }, [searchParams])\n\n  const getClassClubSearchParamName = useCallback((): [string | null, boolean | null] => {\n    // Get params\n    const classParamName = searchParams.get(ACTIVE_CLASS_SEARCH_PARAM)\n    const clubParamName = searchParams.get(ACTIVE_CLUB_SEARCH_PARAM)\n\n    // Class provided\n    if (classParamName) {\n      // Both provided, ignore\n      if (clubParamName) {\n        deleteAll()\n        return [null, null]\n      }\n\n      return [classParamName, true]\n\n      // Club provided\n    } else if (clubParamName) {\n      // Both provided, ignore\n      if (classParamName) {\n        deleteAll()\n        return [null, null]\n      }\n\n      return [clubParamName, false]\n      // No set\n    } else {\n      return [null, null]\n    }\n  }, [deleteAll, searchParams])\n\n  return {\n    setClassClubSearchParam: setClassClubSearchParam,\n    getClassClubSearchParamName: getClassClubSearchParamName,\n  }\n}\n\nexport function useFetchEvents(\n  when?: \"today\" | \"past\" | \"future\",\n  limit?: number,\n): [EventModel[], boolean, number, (page: number) => void, number] {\n  const { token } = useAuth()\n\n  // Required states\n  const [events, setEvents] = useState<EventModel[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [page, setPage] = useState<number>(1)\n  const [numPages, setNumPages] = useState<number>(1)\n\n  // HTTP query\n  useEffect(() => {\n    void getEventList(page, when, token, limit).then((response) => {\n      setEvents(response.data)\n      setIsLoading(false)\n      setNumPages(Math.ceil(response.total / response.limit))\n\n      return () => setIsLoading(true)\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page])\n\n  return [events, isLoading, page, setPage, numPages]\n}\n\nexport function useSelectedMenu(\n  defaultMenu: number,\n  menuOptionsLabels: string[],\n): [number, (newMenu: number) => void] {\n  const [selectedMenu, setSelectedMenu] = useState<number>(defaultMenu)\n  const [searchParams, setSearchParams] = useSearchParams()\n  const ACTIVE_MENU_SEARCH_PARAM = \"menu\"\n\n  // Pick the right menu from Search Params\n  useEffect(() => {\n    if (menuOptionsLabels.length > 0) {\n      // We have to wait for menuOptionLabels to be known until the back returns the stageType\n      const desired_active_menu = searchParams.get(ACTIVE_MENU_SEARCH_PARAM)\n      if (desired_active_menu && menuOptionsLabels.includes(desired_active_menu)) {\n        // Set selected menu to the index of the active menu from URL params if it exists\n        setSelectedMenu(menuOptionsLabels.indexOf(desired_active_menu))\n      } else {\n        // Otherwise, set the URL to the default menu\n        const defaultMenuLabel = menuOptionsLabels[defaultMenu]\n        searchParams.set(ACTIVE_MENU_SEARCH_PARAM, defaultMenuLabel)\n        setSearchParams(searchParams, { replace: true }) // Use replace: true to avoid history stack changes\n        setSelectedMenu(defaultMenu)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [menuOptionsLabels])\n\n  // update page when navigating\n  const handleMenuChange = useCallback(\n    (newValue: number) => {\n      setSelectedMenu(newValue)\n      searchParams.set(ACTIVE_MENU_SEARCH_PARAM, menuOptionsLabels[newValue])\n      setSearchParams(searchParams, { replace: true })\n    },\n    [menuOptionsLabels, searchParams, setSearchParams],\n  )\n\n  return [selectedMenu, handleMenuChange]\n}\n"],"names":["useFetchClasses","eventId","stageId","useParams","activeItem","setActiveItem","useState","isClass","setIsClass","classesQuery","useQuery","getClassesInStage","clubsQuery","getClubsInStage","setClassClubSearchParam","getClassClubSearchParamName","useClassClubSearchParams","setClassClub","useCallback","newItemId","newItem","_a","c","hasInitialized","useRef","useEffect","itemName","isClassInSearchParams","item","findClassClub","refresh","query","name","value","ACTIVE_CLASS_SEARCH_PARAM","ACTIVE_CLUB_SEARCH_PARAM","searchParams","setSearchParams","useSearchParams","deleteAll","classParamName","clubParamName","useFetchEvents","when","limit","token","useAuth","events","setEvents","isLoading","setIsLoading","page","setPage","numPages","setNumPages","getEventList","response","useSelectedMenu","defaultMenu","menuOptionsLabels","selectedMenu","setSelectedMenu","ACTIVE_MENU_SEARCH_PARAM","desired_active_menu","defaultMenuLabel","handleMenuChange","newValue"],"mappings":"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"}