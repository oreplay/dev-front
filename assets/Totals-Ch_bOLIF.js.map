{"version":3,"file":"Totals-Ch_bOLIF.js","sources":["../../src/pages/Results/pages/Results/pages/Totals/pages/RelayResults/components/StageResultItem.tsx","../../src/pages/Results/pages/Results/pages/Totals/pages/RelayResults/components/TotalsResultItem.tsx","../../src/pages/Results/pages/Results/pages/Totals/pages/RelayResults/TotalsResults.tsx","../../src/pages/Results/pages/Results/pages/Totals/services/TotalsService.ts","../../src/pages/Results/pages/Results/pages/Totals/Totals.tsx"],"sourcesContent":["import FlexCol from \"../../../../../../../components/FlexCol.tsx\"\nimport { Typography } from \"@mui/material\"\nimport ResultListItem from \"../../../../../../../components/ResultsList/ResultListItem.tsx\"\nimport { ProcessedOverallModel } from \"../../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { parseSecondsToMMSS } from \"../../../../../../../../../shared/Functions.tsx\"\n\ntype StageResultItemProps = {\n  stage: ProcessedOverallModel\n}\n\nexport default function StageResultItem({ stage }: StageResultItemProps) {\n  const stageDescription = stage?.stage ? stage.stage.description : `Stage ${stage.stage_order}`\n\n  return (\n    <ResultListItem>\n      <FlexCol width={\"10px\"}>\n        <Typography sx={{ fontSize: \"small\" }}>{`${stage.position}.`}</Typography>\n      </FlexCol>\n      <FlexCol flexGrow={1}>\n        <Typography sx={{ fontSize: \"small\" }}>{stageDescription}</Typography>\n      </FlexCol>\n      <FlexCol flexGrow={1}>\n        <Typography sx={{ fontSize: \"small\" }}>\n          {stage.time_seconds ? parseSecondsToMMSS(stage.time_seconds) : \"\"}\n        </Typography>\n        <Typography sx={{ fontSize: \"small\" }}>{stage.points_final}</Typography>\n      </FlexCol>\n    </ResultListItem>\n  )\n}\n","import { ProcessedRunnerModel } from \"../../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport FlexCol from \"../../../../../../../components/FlexCol.tsx\"\nimport RacePosition from \"../../../../../../../components/RacePosition..tsx\"\nimport { runnerService } from \"../../../../../../../../../domain/services/RunnerService.ts\"\nimport { useTranslation } from \"react-i18next\"\nimport ParticipantName from \"../../../../../../../components/ParticipantName.tsx\"\nimport StageResultItem from \"./StageResultItem.tsx\"\nimport { Box, Typography } from \"@mui/material\"\nimport ResultListItem from \"../../../../../../../components/ResultsList/ResultListItem.tsx\"\nimport { RunnerModel } from \"../../../../../../../../../shared/EntityTypes.ts\"\nimport { parseSecondsToMMSS } from \"../../../../../../../../../shared/Functions.tsx\"\n\nexport default function TotalsResultItem({\n  runner,\n}: {\n  runner: ProcessedRunnerModel\n  handleRowClick: (runner: RunnerModel) => void\n}) {\n  const { t } = useTranslation()\n\n  const hasChipDownload = true\n  const result = runner.overalls?.overall\n\n  if (!result) {\n    console.error(\"Totals results without overalls\", runner)\n    return <Box></Box>\n  }\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <ResultListItem key={runner.id}>\n        <FlexCol width=\"10px\">\n          <RacePosition\n            position={result.position}\n            hasDownload={hasChipDownload}\n            isNC={runner.is_nc}\n          />\n        </FlexCol>\n        <ParticipantName name={runner.full_name} subtitle={runnerService.getClubName(runner, t)} />\n        <FlexCol flexGrow={1}>\n          <Typography>\n            {result.time_seconds ? parseSecondsToMMSS(result.time_seconds) : \"\"}\n          </Typography>\n          <Typography>{result.points_final}</Typography>\n        </FlexCol>\n      </ResultListItem>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        {runner.overalls?.parts?.map((stage) => <StageResultItem key={stage.id} stage={stage} />)}\n      </Box>\n    </Box>\n  )\n}\n","import ResultListContainer from \"../../../../../../components/ResultsList/ResultListContainer.tsx\"\nimport { ResultsPageProps } from \"../../../../shared/commonProps.ts\"\nimport { ProcessedRunnerModel } from \"../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { AxiosError } from \"axios\"\nimport { RunnerModel } from \"../../../../../../../../shared/EntityTypes.ts\"\nimport ChooseClassMsg from \"../../../../components/ChooseClassMsg.tsx\"\nimport ResultsListSkeleton from \"../../../../../../components/ResultsList/ResultListSkeleton.tsx\"\nimport GeneralErrorFallback from \"../../../../../../../../components/GeneralErrorFallback.tsx\"\nimport TotalsResultItem from \"./components/TotalsResultItem.tsx\"\nimport NotImplementedAlertBox from \"../../../../../../../../components/NotImplementedAlertBox.tsx\"\n\nexport default function TotalsResults(\n  props: ResultsPageProps<ProcessedRunnerModel[], AxiosError<RunnerModel[]>>,\n) {\n  const runnersList = props.runnersQuery.data\n\n  // @ts-expect-error TS6133: variable is declared but never used\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const handleRowClick = (runner: RunnerModel) => {}\n\n  if (!props.activeItem) {\n    return <ChooseClassMsg />\n  }\n  if (props.runnersQuery.isFetching) {\n    return <ResultsListSkeleton />\n  } else if (props.runnersQuery.isError) {\n    return <GeneralErrorFallback />\n  } else {\n    return (\n      <ResultListContainer>\n        <NotImplementedAlertBox />\n        {runnersList?.map((runner: ProcessedRunnerModel) => (\n          <TotalsResultItem key={runner.id} runner={runner} handleRowClick={handleRowClick} />\n        ))}\n      </ResultListContainer>\n    )\n  }\n}\n","import { ProcessedRunnerModel } from \"../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { getRunnersInStage } from \"../../../../../services/EventService.ts\"\nimport { sortRunners } from \"../../../../../shared/sortingFunctions/sortRunners.ts\"\nimport { processRunnerData } from \"../../../../../components/VirtualTicket/shared/virtualTicketFunctions.ts\"\n\nexport async function getTotalsByClass(\n  eventId: string,\n  stageId: string,\n  classId: string,\n): Promise<ProcessedRunnerModel[]> {\n  // Make query\n  const runnersPage = await getRunnersInStage(eventId, stageId, classId)\n  let runnersList = runnersPage.data\n\n  // Order\n  runnersList = sortRunners(runnersList)\n\n  // Runner processing\n  return processRunnerData(runnersList)\n}\n\nexport async function getTotalsByClub(\n  eventId: string,\n  stageId: string,\n  clubId: string,\n): Promise<ProcessedRunnerModel[]> {\n  // Make query\n  const runnersPage = await getRunnersInStage(eventId, stageId, undefined, clubId)\n  let runnersList = runnersPage.data\n\n  // Order\n  runnersList = sortRunners(runnersList)\n\n  // Runner processing\n  return processRunnerData(runnersList)\n}\n","import TotalsResults from \"./pages/RelayResults/TotalsResults.tsx\"\nimport StageLayout from \"../../components/Layout/StageLayout.tsx\"\nimport { useFetchClasses } from \"../../../../shared/hooks.ts\"\nimport { useQuery } from \"react-query\"\nimport { ProcessedRunnerModel } from \"../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { AxiosError } from \"axios\"\nimport { RunnerModel } from \"../../../../../../shared/EntityTypes.ts\"\nimport { useParams } from \"react-router-dom\"\nimport { useCallback } from \"react\"\nimport { getTotalsByClass, getTotalsByClub } from \"./services/TotalsService.ts\"\n\nexport default function Totals() {\n  // Get stage's and event's ids\n  const { eventId, stageId } = useParams()\n  if (!eventId || !stageId) {\n    throw new Error(\"Event Id or Stage Id is missing\")\n  }\n\n  const {\n    activeItem,\n    classesQuery,\n    clubsQuery,\n    isClass,\n    setClassClubId,\n    refresh: refreshClassesClubs,\n  } = useFetchClasses()\n\n  // Query runners\n  const runnersQueryByClasses = useQuery<ProcessedRunnerModel[], AxiosError<RunnerModel[]>>(\n    [\"results\", \"classes\", activeItem?.id],\n    () =>\n      activeItem\n        ? getTotalsByClass(eventId, stageId, activeItem.id)\n        : Promise.reject(new Error(\"No active class\")),\n    {\n      enabled: !!activeItem && isClass,\n      refetchOnWindowFocus: false,\n    },\n  )\n\n  const runnersQueryByClubs = useQuery<ProcessedRunnerModel[], AxiosError<RunnerModel[]>>(\n    [\"results\", \"clubs\", activeItem?.id],\n    () =>\n      activeItem\n        ? getTotalsByClub(eventId, stageId, activeItem.id)\n        : Promise.reject(new Error(\"No active class\")),\n    {\n      enabled: !!activeItem && !isClass,\n      refetchOnWindowFocus: false,\n    },\n  )\n\n  // Handle re-fetching\n  const handleRefreshClick = useCallback(() => {\n    refreshClassesClubs()\n    void runnersQueryByClasses.refetch()\n    void runnersQueryByClubs.refetch()\n  }, [refreshClassesClubs, runnersQueryByClasses, runnersQueryByClubs])\n\n  return (\n    <StageLayout\n      key={\"stageLayout\"}\n      activeItem={activeItem}\n      isClass={isClass}\n      classesQuery={classesQuery}\n      clubsQuery={clubsQuery}\n      setActiveClassClub={setClassClubId}\n      handleRefreshClick={handleRefreshClick}\n    >\n      <TotalsResults\n        runnersQuery={isClass ? runnersQueryByClasses : runnersQueryByClubs}\n        activeItem={activeItem}\n        isClass={isClass}\n      />\n    </StageLayout>\n  )\n}\n"],"names":["StageResultItem","stage","stageDescription","description","stage_order","ResultListItem","children","_jsx","FlexCol","width","Typography","sx","fontSize","position","flexGrow","_jsxs","time_seconds","parseSecondsToMMSS","points_final","TotalsResultItem","runner","t","useTranslation","hasChipDownload","result","overalls","overall","Box","display","flexDirection","RacePosition","hasDownload","isNC","is_nc","ParticipantName","name","full_name","subtitle","runnerService","getClubName","id","parts","map","console","error","TotalsResults","props","runnersList","runnersQuery","data","handleRowClick","activeItem","isFetching","ResultsListSkeleton","isError","GeneralErrorFallback","ResultListContainer","NotImplementedAlertBox","ChooseClassMsg","getTotalsByClass","eventId","stageId","classId","getRunnersInStage","sortRunners","processRunnerData","getTotalsByClub","clubId","Totals","useParams","Error","classesQuery","clubsQuery","isClass","setClassClubId","refresh","refreshClassesClubs","useFetchClasses","runnersQueryByClasses","useQuery","Promise","reject","enabled","refetchOnWindowFocus","runnersQueryByClubs","handleRefreshClick","useCallback","refetch","StageLayout","setActiveClassClub"],"mappings":"isCAUA,SAAwBA,EAAgB,CAAEC,MAAAA,CAA4B,EAAG,CACvE,MAAMC,EAAmBD,GAAAA,MAAAA,EAAOA,MAAQA,EAAMA,MAAME,YAAc,SAASF,EAAMG,WAAW,GAE5F,SACGC,EAAc,CAAAC,SAAA,CACbC,EAACC,EAAO,CAACC,MAAO,OAAOH,WACpBI,EAAU,CAACC,GAAI,CAAEC,SAAU,OAAA,EAAUN,SAAE,GAAGL,EAAMY,QAAQ,GAAA,CAAgB,CAAA,CAClE,EACTN,EAACC,EAAO,CAACM,SAAU,EAAER,WAClBI,EAAU,CAACC,GAAI,CAAEC,SAAU,OAAA,EAAUN,SAAEJ,CAAAA,CAA6B,CAAA,CAC9D,EACTa,EAACP,EAAO,CAACM,SAAU,EAAER,SAAA,CACnBC,EAACG,EAAU,CAACC,GAAI,CAAEC,SAAU,OAAA,EAAUN,SACnCL,EAAMe,aAAeC,EAAmBhB,EAAMe,YAAY,EAAI,EAAA,CACrD,EACZT,EAACG,EAAU,CAACC,GAAI,CAAEC,SAAU,OAAA,EAAUN,SAAEL,EAAMiB,YAAAA,CAAyB,CAAC,CAAA,CACjE,CAAC,CAAA,CACI,CAEpB,CCjBA,SAAwBC,EAAiB,CACvCC,OAAAA,CAIF,EAAG,WACD,KAAM,CAAEC,CAAAA,EAAMC,EAAAA,EAERC,EAAkB,GAClBC,GAASJ,EAAAA,EAAOK,WAAPL,YAAAA,EAAiBM,QAEhC,OAAKF,IAMFG,EAAG,CACFhB,GAAI,CACFiB,QAAS,OACTC,cAAe,QAAA,EACfvB,SAAA,CAEFS,EAACV,EAAc,CAAAC,SAAA,CACbC,EAACC,EAAO,CAACC,MAAM,OAAMH,WAClBwB,EAAY,CACXjB,SAAUW,EAAOX,SACjBkB,YAAaR,EACbS,KAAMZ,EAAOa,KAAAA,CACd,CAAA,CACM,EACT1B,EAAC2B,EAAe,CAACC,KAAMf,EAAOgB,UAAWC,SAAUC,EAAcC,YAAYnB,EAAQC,CAAC,CAAA,CAAI,EAC1FN,EAACP,EAAO,CAACM,SAAU,EAAER,SAAA,CACnBC,EAACG,EAAU,CAAAJ,SACRkB,EAAOR,aAAeC,EAAmBO,EAAOR,YAAY,EAAI,EAAA,CACvD,EACZT,EAACG,EAAU,CAAAJ,SAAEkB,EAAON,YAAAA,CAAyB,CAAC,CAAA,CACvC,CAAC,CAAA,EAdSE,EAAOoB,EAeZ,IACfb,EAAG,CACFhB,GAAI,CACFiB,QAAS,OACTC,cAAe,QAAA,EACfvB,UAEDc,GAAAA,EAAAA,EAAOK,WAAPL,YAAAA,EAAiBqB,QAAjBrB,YAAAA,EAAwBsB,IAAKzC,KAAWD,EAAe,CAAgBC,MAAAA,CAAAA,EAAVA,EAAMuC,EAAmB,EAAC,CACrF,CAAC,CAAA,CACH,GAnCLG,QAAQC,MAAM,kCAAmCxB,CAAM,EAChDb,EAACoB,EAAG,EAAM,EAoCrB,CClDA,SAAwBkB,EACtBC,EACA,CACA,MAAMC,EAAcD,EAAME,aAAaC,KAIjCC,EAAkB9B,GAAwB,CAAC,EAEjD,OAAK0B,EAAMK,WAGPL,EAAME,aAAaI,WACd7C,EAAC8C,EAAmB,EAAE,EACpBP,EAAME,aAAaM,QACrB/C,EAACgD,EAAoB,EAAE,IAG3BC,EAAmB,CAAAlD,UAClBC,EAACkD,EAAsB,EAAE,EACxBV,GAAAA,YAAAA,EAAaL,IAAKtB,GACjBb,EAACY,EAAgB,CAAiBC,OAAAA,EAAgB8B,eAAAA,CAAAA,EAA3B9B,EAAOoB,EAAqD,EACnF,CAAA,CACiB,EAbhBjC,EAACmD,EAAc,EAAE,CAgB5B,CChCA,eAAsBC,EACpBC,EACAC,EACAC,EACiC,CAGjC,IAAIf,GADgB,MAAMgB,EAAkBH,EAASC,EAASC,CAAO,GACvC,KAG9B,OAAAf,EAAciB,EAAYjB,CAAW,EAG9BkB,EAAkBlB,CAAW,CACtC,CAEA,eAAsBmB,EACpBN,EACAC,EACAM,EACiC,CAGjC,IAAIpB,GADgB,MAAMgB,EAAkBH,EAASC,EAAS,OAAWM,CAAM,GACjD,KAG9B,OAAApB,EAAciB,EAAYjB,CAAW,EAG9BkB,EAAkBlB,CAAW,CACtC,CCxBA,SAAwBqB,IAAS,CAE/B,KAAM,CAAER,QAAAA,EAASC,QAAAA,CAAAA,EAAYQ,EAAAA,EAC7B,GAAI,CAACT,GAAW,CAACC,EACf,MAAM,IAAIS,MAAM,iCAAiC,EAGnD,KAAM,CACJnB,WAAAA,EACAoB,aAAAA,EACAC,WAAAA,EACAC,QAAAA,EACAC,eAAAA,EACAC,QAASC,CAAAA,EACPC,EAAAA,EAGEC,EAAwBC,EAC5B,CAAC,UAAW,UAAW5B,GAAAA,YAAAA,EAAYX,EAAE,EACrC,IACEW,EACIQ,EAAiBC,EAASC,EAASV,EAAWX,EAAE,EAChDwC,QAAQC,OAAO,IAAIX,MAAM,iBAAiB,CAAC,EACjD,CACEY,QAAS,CAAC,CAAC/B,GAAcsB,EACzBU,qBAAsB,EAAA,CAE1B,EAEMC,EAAsBL,EAC1B,CAAC,UAAW,QAAS5B,GAAAA,YAAAA,EAAYX,EAAE,EACnC,IACEW,EACIe,EAAgBN,EAASC,EAASV,EAAWX,EAAE,EAC/CwC,QAAQC,OAAO,IAAIX,MAAM,iBAAiB,CAAC,EACjD,CACEY,QAAS,CAAC,CAAC/B,GAAc,CAACsB,EAC1BU,qBAAsB,EAAA,CAE1B,EAGME,EAAqBC,EAAAA,YAAY,IAAM,CAC3CV,EAAAA,EACKE,EAAsBS,QAAAA,EACtBH,EAAoBG,QAAAA,CAC3B,EAAG,CAACX,EAAqBE,EAAuBM,CAAmB,CAAC,EAEpE,SACGI,EAAW,CAEVrC,WAAAA,EACAsB,QAAAA,EACAF,aAAAA,EACAC,WAAAA,EACAiB,mBAAoBf,EACpBW,mBAAAA,EAAuC/E,WAEtCuC,EAAa,CACZG,aAAcyB,EAAUK,EAAwBM,EAChDjC,WAAAA,EACAsB,QAAAA,CAAAA,CACD,CAAA,EAZI,aAaM,CAEjB"}