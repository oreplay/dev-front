{"version":3,"file":"Rogaine-BnCLamgb.js","sources":["../../src/pages/Results/pages/Results/pages/Rogaine/components/RogaineVirtualTicket/components/RogaineVirtualTicketPointsBanner.tsx","../../src/pages/Results/pages/Results/pages/Rogaine/components/RogaineVirtualTicket/components/RogaineVirtualTicketSplits.tsx","../../src/pages/Results/pages/Results/pages/Rogaine/components/RogaineVirtualTicket/RogaineVirtualTicket.tsx","../../src/pages/Results/pages/Results/pages/Rogaine/pages/RogaineResults/RogaineResults.tsx","../../src/pages/Results/pages/Results/pages/Rogaine/shared/Functions.ts","../../src/pages/Results/pages/Results/pages/Rogaine/pages/RogainePoints/components/ControlBadge.tsx","../../src/pages/Results/pages/Results/pages/Rogaine/pages/RogainePoints/components/OnlyForClassesMsg.tsx","../../src/pages/Results/pages/Results/pages/Rogaine/pages/RogainePoints/RogainePoints.tsx","../../src/pages/Results/pages/Results/pages/Rogaine/services/RogaineService.ts","../../src/pages/Results/pages/Results/pages/Rogaine/Rogaine.tsx"],"sourcesContent":["import React, { CSSProperties } from \"react\"\nimport Grid from \"@mui/material/Grid\"\nimport { Typography } from \"@mui/material\"\nimport { ProcessedRunnerResultModel } from \"../../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { parseResultStatus } from \"../../../../../../../shared/sortingFunctions/sortRunners.ts\"\nimport RaceTime from \"../../../../../../../components/RaceTime.tsx\"\nimport StartTime from \"../../../../../../../components/StartTime.tsx\"\nimport { useTranslation } from \"react-i18next\"\nimport { hasChipDownload } from \"../../../../../shared/functions.ts\"\n\ntype RogaineVirtualTicketPointsBannerProps = {\n  runnerResult: ProcessedRunnerResultModel\n}\n\n/**\n * Displays a runner start and finish times and race time within a virtual ticket for FootO.\n * @param runner Runner to be displayed\n */\nconst RogaineVirtualTicketPointsBanner: React.FC<RogaineVirtualTicketPointsBannerProps> = ({\n  runnerResult,\n}) => {\n  const { t } = useTranslation()\n\n  const titleStyles: CSSProperties = {\n    fontWeight: \"bold\",\n    fontSize: \"small\",\n  }\n\n  const gridStyles: CSSProperties = {\n    display: \"flex\",\n  }\n\n  const textStyles: CSSProperties = {\n    fontSize: \"small\",\n    marginLeft: \"6px\",\n  }\n\n  const status = parseResultStatus(runnerResult.status_code as string)\n  return (\n    <>\n      <Grid style={gridStyles} item xs={4}>\n        <Typography style={titleStyles}>{t(\"ResultsStage.BonusPoints\")}</Typography>\n        <Typography style={textStyles}>\n          {runnerResult.points_final || runnerResult.finish_time\n            ? `+${runnerResult.points_bonus}`\n            : \"\"}\n        </Typography>\n      </Grid>\n      <Grid style={gridStyles} item xs={4}>\n        <Typography style={titleStyles}>{t(\"ResultsStage.PenaltyPoints\")}</Typography>\n        <Typography style={textStyles}>\n          {runnerResult.points_final || runnerResult.finish_time\n            ? `${runnerResult.points_penalty}`\n            : \"\"}\n        </Typography>\n      </Grid>\n      <Grid sx={{ justifyContent: \"flex-end\" }} style={gridStyles} item xs={4}>\n        <Typography style={titleStyles}>{t(\"ResultsStage.Points\")}</Typography>\n        <Typography style={textStyles}>\n          {runnerResult.points_final || runnerResult.finish_time\n            ? `${runnerResult.points_final}`\n            : \"\"}\n        </Typography>\n      </Grid>\n      <Grid style={gridStyles} item xs={6}>\n        <Typography style={titleStyles}>{t(\"ResultsStage.VirtualTicket.StartHour\")}</Typography>\n        <StartTime style={textStyles} startTime={runnerResult.start_time} />\n      </Grid>\n      <Grid style={gridStyles} sx={{ justifyContent: \"flex-end\" }} item xs={6}>\n        <Typography style={titleStyles}>{t(\"ResultsStage.VirtualTicket.RaceTime\")}</Typography>\n        <RaceTime\n          style={textStyles}\n          status={status}\n          isFinalTime={hasChipDownload(runnerResult)}\n          start_time={runnerResult.start_time}\n          finish_time={runnerResult.finish_time}\n          time_seconds={runnerResult.time_seconds}\n        />\n      </Grid>\n    </>\n  )\n}\n\nexport default RogaineVirtualTicketPointsBanner\n","import React from \"react\"\nimport { ProcessedSplitModel } from \"../../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport VirtualTicketControl from \"../../../../../../../components/VirtualTicket/VirtualTicketControl.tsx\"\nimport { Grid, Typography } from \"@mui/material\"\nimport { parseSecondsToMMSS } from \"../../../../../../../../../shared/Functions.tsx\"\n\ntype RogaineVirtualTicketProps = {\n  split: ProcessedSplitModel\n  index: number\n}\n\n/**\n * Display a rogaine splits line within a virtual ticket.\n * @param split Split to be displayed\n */\nconst RogaineVirtualTicketSplit: React.FC<RogaineVirtualTicketProps> = ({ split, index }) => {\n  return (\n    <Grid\n      style={{ display: \"flex\", width: \"100%\", backgroundColor: index % 2 ? \"white\" : \"#fcefde\" }}\n    >\n      <VirtualTicketControl\n        control={split.control}\n        order_number={split.order_number}\n        points={split.points}\n        gridWidth={3}\n      />\n      <Grid item xs={4}>\n        <Typography sx={{ textAlign: \"center\" }}>\n          {split.time !== null ? parseSecondsToMMSS(split.time) : \"--\"}\n        </Typography>\n      </Grid>\n      <Grid item xs={5}>\n        <Typography sx={{ textAlign: \"center\" }}>\n          {split.cumulative_time !== null ? parseSecondsToMMSS(split.cumulative_time) : \"--\"}\n        </Typography>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default RogaineVirtualTicketSplit\n","import React, { CSSProperties } from \"react\"\nimport {\n  VirtualTicketContainer,\n  VirtualTicketProps,\n} from \"../../../../../../components/VirtualTicket/VirtualTicketContainer.tsx\"\nimport { VirtualTicketHeader } from \"../../../../../../components/VirtualTicket/VirtualTicketHeader.tsx\"\nimport { VirtualTicketSplits } from \"../../../../../../components/VirtualTicket/VirtualTicketSplits/VirtualTicketSplits.tsx\"\nimport VirtualTicketRunnerInfo from \"../../../../../../components/VirtualTicket/VirtualTicketRunnerInfo.tsx\"\nimport RogaineVirtualTicketPointsBanner from \"./components/RogaineVirtualTicketPointsBanner.tsx\"\nimport RogaineVirtualTicketSplit from \"./components/RogaineVirtualTicketSplits.tsx\"\nimport { Grid, Typography } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\nimport { hasChipDownload } from \"../../../../shared/functions.ts\"\nimport { runnerService } from \"../../../../../../../../domain/services/RunnerService.ts\"\n\n/**\n * This is the Virtual Ticket for Foot-O results\n *\n * @param isTicketOpen\n * @param runner: ProcessedRunnerModel|RunnerResultModel\n * @param handleCloseTicket\n * @constructor\n */\nconst RogaineVirtualTicket: React.FC<VirtualTicketProps> = ({\n  isTicketOpen,\n  runner,\n  handleCloseTicket,\n  setClassClubId,\n}) => {\n  const { t } = useTranslation()\n\n  const headersStyles: CSSProperties = {\n    fontWeight: \"bold\",\n    fontSize: \"medium\",\n    textAlign: \"center\",\n  }\n\n  if (runner) {\n    return (\n      <VirtualTicketContainer\n        isTicketOpen={isTicketOpen}\n        runner={runner}\n        handleCloseTicket={handleCloseTicket}\n      >\n        <VirtualTicketHeader>\n          <VirtualTicketRunnerInfo runner={runner} setClassClubId={setClassClubId} />\n          <RogaineVirtualTicketPointsBanner runnerResult={runner.stage} />\n        </VirtualTicketHeader>\n        <VirtualTicketSplits download={hasChipDownload(runner)} isDNS={runnerService.isDNS(runner)}>\n          <Grid item xs={3}>\n            <Typography variant=\"subtitle2\" sx={headersStyles}>\n              {t(\"ResultsStage.VirtualTicket.Control\")}\n            </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography variant=\"subtitle2\" sx={headersStyles}>\n              {t(\"ResultsStage.VirtualTicket.Partial\")}\n            </Typography>\n          </Grid>\n          <Grid item xs={5}>\n            <Typography variant=\"subtitle2\" sx={headersStyles}>\n              {t(\"ResultsStage.VirtualTicket.Cumulative\")}\n            </Typography>\n          </Grid>\n          {runner.stage.splits.map((split, index) => (\n            <RogaineVirtualTicketSplit key={split.id} split={split} index={index} />\n          ))}\n        </VirtualTicketSplits>\n      </VirtualTicketContainer>\n    )\n  } else {\n    return <></>\n  }\n}\n\nexport default RogaineVirtualTicket\n","import { useTranslation } from \"react-i18next\"\nimport ResultListContainer from \"../../../../../../components/ResultsList/ResultListContainer.tsx\"\nimport ResultListItem from \"../../../../../../components/ResultsList/ResultListItem.tsx\"\nimport { Box, Typography } from \"@mui/material\"\nimport { parseResultStatus } from \"../../../../../../shared/sortingFunctions/sortRunners.ts\"\nimport { RESULT_STATUS_TEXT } from \"../../../../../../shared/constants.ts\"\nimport { useVirtualTicket } from \"../../../../../../components/VirtualTicket/shared/hooks.ts\"\nimport RogaineVirtualTicket from \"../../components/RogaineVirtualTicket/RogaineVirtualTicket.tsx\"\nimport RaceTime from \"../../../../../../components/RaceTime.tsx\"\nimport ResultsListSkeleton from \"../../../../../../components/ResultsList/ResultListSkeleton.tsx\"\nimport { ResultsPageProps } from \"../../../../shared/commonProps.ts\"\nimport GeneralErrorFallback from \"../../../../../../../../components/GeneralErrorFallback.tsx\"\nimport ChooseClassMsg from \"../../../../components/ChooseClassMsg.tsx\"\nimport { ProcessedRunnerModel } from \"../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { AxiosError } from \"axios\"\nimport { RunnerModel } from \"../../../../../../../../shared/EntityTypes.ts\"\nimport ParticipantName from \"../../../../../../components/ParticipantName.tsx\"\nimport { runnerService } from \"../../../../../../../../domain/services/RunnerService.ts\"\nimport { hasChipDownload as hasChipDownloadFunction } from \"../../../../shared/functions.ts\"\nimport RacePosition from \"../../../../../../components/RacePosition..tsx\"\n\ninterface RogainePointsProps\n  extends ResultsPageProps<[ProcessedRunnerModel[], bigint[]], AxiosError<RunnerModel[]>> {\n  setClassClubId: (newClassOrClubId: string, isClass: boolean) => void\n}\n\nexport default function RogainePoints(props: RogainePointsProps) {\n  const { t } = useTranslation()\n\n  const [isVirtualTicketOpen, selectedRunner, handleRowClick, handleCloseVirtualTicket] =\n    useVirtualTicket()\n\n  // Gather runners data\n  const runnersList = props.runnersQuery.data ? props.runnersQuery.data[0] : null\n\n  // Render component\n  if (!props.activeItem) {\n    return <ChooseClassMsg />\n  } else if (props.runnersQuery.isFetching || props.runnersQuery.isLoading) {\n    return <ResultsListSkeleton />\n  } else if (props.runnersQuery.isError) {\n    return <GeneralErrorFallback />\n  } else {\n    return (\n      <ResultListContainer>\n        {runnersList?.map((runner) => {\n          const runnerResult = runner.stage\n          const status = parseResultStatus(runnerResult?.status_code as string)\n          const statusOkOrNc = status === RESULT_STATUS_TEXT.ok || status === RESULT_STATUS_TEXT.nc\n          const hasDownload = hasChipDownloadFunction(runner)\n\n          return (\n            <ResultListItem key={runner.id} onClick={() => handleRowClick(runner)}>\n              <Box\n                sx={{\n                  flexShrink: 0,\n                  display: \"flex\", // Enables flex properties\n                  flexDirection: \"column\", // Stack content vertically\n                  justifyContent: \"flex-start\", // Align content to the top\n                  alignItems: \"flex-end\",\n                  flexGrow: 0,\n                  width: \"10px\",\n                }}\n              >\n                <RacePosition\n                  position={runner.stage.position}\n                  isNC={runner.is_nc || status === RESULT_STATUS_TEXT.nc}\n                  hasDownload={hasDownload}\n                />\n              </Box>\n              <ParticipantName\n                name={runner.full_name}\n                subtitle={\n                  props.isClass\n                    ? runnerService.getClubName(runner, t)\n                    : runnerService.getClassName(runner)\n                }\n              />\n              <Box\n                sx={{\n                  flexShrink: 0,\n                  display: \"flex\", // Enables flex properties\n                  flexDirection: \"column\", // Stack content vertically\n                  justifyContent: \"flex-start\", // Align content to the top\n                  alignItems: \"flex-end\",\n                  flexGrow: 1,\n                }}\n              >\n                <Typography>\n                  {statusOkOrNc\n                    ? runnerResult.points_final || runnerResult.finish_time\n                      ? `${runnerResult.points_final}`\n                      : \"\"\n                    : \"\"}\n                </Typography>\n                <RaceTime\n                  displayStatus\n                  status={status}\n                  isFinalTime={hasDownload}\n                  start_time={runnerResult.start_time}\n                  finish_time={runnerResult.finish_time}\n                  time_seconds={runnerResult.time_seconds}\n                />\n              </Box>\n            </ResultListItem>\n          )\n        })}\n        <RogaineVirtualTicket\n          isTicketOpen={isVirtualTicketOpen}\n          runner={selectedRunner}\n          handleCloseTicket={handleCloseVirtualTicket}\n          setClassClubId={props.setClassClubId}\n        />\n      </ResultListContainer>\n    )\n  }\n}\n","import { ProcessedRunnerModel } from \"../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\n\nexport function getUniqueStationNumbers(runners: ProcessedRunnerModel[]): bigint[] {\n  const stationNumbers = new Set<bigint>()\n\n  runners.forEach((runner) => {\n    runner.stage.splits.forEach((split) => {\n      if (split.control) {\n        stationNumbers.add(BigInt(split.control.station))\n      }\n    })\n  })\n\n  // Convert the set to an array and sort in ascending order\n  return Array.from(stationNumbers).sort((a, b) => (a < b ? -1 : a > b ? 1 : 0))\n}\n","import { Box } from \"@mui/material\"\nimport React from \"react\"\n\ninterface ControlBadgeProps {\n  number: bigint | number\n  punched?: boolean\n}\n\nconst ControlBadge: React.FC<ControlBadgeProps> = ({ number, punched = false }) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: 32, // Circle diameter\n        height: 32, // Circle diameter\n        borderRadius: \"50%\", // Makes it a circle,\n        borderColor: punched ? undefined : \"text.secondary\",\n        border: punched ? 0 : 1,\n        backgroundColor: punched ? \"secondary.main\" : undefined,\n        color: punched ? \"white\" : \"text.secondary\",\n      }}\n    >\n      {number.toString()}\n    </Box>\n  )\n}\n\nexport default ControlBadge\n","import { useTranslation } from \"react-i18next\"\nimport { Alert, AlertTitle } from \"@mui/material\"\n\nexport default function OnlyForClassesMsg() {\n  const { t } = useTranslation()\n\n  return (\n    <Alert severity={\"info\"}>\n      <AlertTitle>{t(\"ResultsStage.PointsTable.OnlyForClasses\")}</AlertTitle>\n    </Alert>\n  )\n}\n","import { useTranslation } from \"react-i18next\"\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\"\nimport { getUniqueStationNumbers } from \"../../shared/Functions.ts\"\nimport { parseResultStatus } from \"../../../../../../shared/sortingFunctions/sortRunners.ts\"\nimport { parseSecondsToMMSS } from \"../../../../../../../../shared/Functions.tsx\"\nimport ControlBadge from \"./components/ControlBadge.tsx\"\nimport { RESULT_STATUS_TEXT } from \"../../../../../../shared/constants.ts\"\nimport ParticipantName from \"../../../../../../components/ParticipantName.tsx\"\nimport { runnerService } from \"../../../../../../../../domain/services/RunnerService.ts\"\nimport ChooseClassMsg from \"../../../../components/ChooseClassMsg.tsx\"\nimport ResultsListSkeleton from \"../../../../../../components/ResultsList/ResultListSkeleton.tsx\"\nimport GeneralErrorFallback from \"../../../../../../../../components/GeneralErrorFallback.tsx\"\nimport { ResultsPageProps } from \"../../../../shared/commonProps.ts\"\nimport { ProcessedRunnerModel } from \"../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { AxiosError } from \"axios\"\nimport { RunnerModel } from \"../../../../../../../../shared/EntityTypes.ts\"\nimport RacePosition from \"../../../../../../components/RacePosition..tsx\"\nimport { hasChipDownload } from \"../../../../shared/functions.ts\"\nimport OnlyForClassesMsg from \"./components/OnlyForClassesMsg.tsx\"\n\nexport default function RogainePoints(\n  props: ResultsPageProps<[ProcessedRunnerModel[], bigint[]], AxiosError<RunnerModel[]>>,\n) {\n  const { t } = useTranslation()\n  const runnersList = props.runnersQuery.data ? props.runnersQuery.data[0] : null\n\n  const controlNumbers = props.runnersQuery.data ? props.runnersQuery.data[1] : null\n\n  // Component\n  if (!props.activeItem) {\n    return <ChooseClassMsg />\n  } else if (!props.isClass) {\n    return <OnlyForClassesMsg />\n  } else if (props.runnersQuery.isFetching || props.runnersQuery.isLoading) {\n    return <ResultsListSkeleton />\n  } else if (props.runnersQuery.isError) {\n    return <GeneralErrorFallback />\n  } else {\n    return (\n      <TableContainer sx={{ height: \"100%\", flex: 1 }}>\n        <Table>\n          <TableHead>\n            <TableRow key={\"table Head\"}>\n              <TableCell></TableCell>\n              <TableCell sx={{ fontWeight: \"bold\" }}>{t(\"ResultsStage.Name\")}</TableCell>\n              <TableCell sx={{ fontWeight: \"bold\" }}>{t(\"ResultsStage.BonusPoints\")}</TableCell>\n              <TableCell sx={{ fontWeight: \"bold\" }}>{t(\"ResultsStage.PenaltyPoints\")}</TableCell>\n              <TableCell sx={{ fontWeight: \"bold\" }}>{t(\"ResultsStage.Points\")}</TableCell>\n              <TableCell sx={{ fontWeight: \"bold\" }}>{t(\"ResultsStage.RaceTime\")}</TableCell>\n              {// add as many columns as controls\n              controlNumbers?.map((controlNumber) => <TableCell key={controlNumber}></TableCell>)}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {runnersList?.map((runner) => {\n              const runnerResult = runner.stage\n              const status = parseResultStatus(runnerResult?.status_code as string)\n              const statusOkOrNc =\n                status === RESULT_STATUS_TEXT.ok || status === RESULT_STATUS_TEXT.nc\n              const runnerPunchedControls = getUniqueStationNumbers([runner])\n\n              return (\n                <TableRow sx={{ width: { md: \"100%\", sx: \"200px\" } }} key={`runner${runner.id}`}>\n                  <TableCell key={`runner${runner.id}pos`}>\n                    <RacePosition\n                      position={runner.stage.position}\n                      isNC={runner.is_nc || status === RESULT_STATUS_TEXT.nc}\n                      hasDownload={hasChipDownload(runner)}\n                    />\n                  </TableCell>\n                  <TableCell sx={{ minWidth: \"200px\" }} key={`runner${runner.id}name`}>\n                    <ParticipantName\n                      name={runner.full_name}\n                      subtitle={runnerService.getClubName(runner, t)}\n                    />\n                  </TableCell>\n                  <TableCell key={`runner${runner.id}bonus`}>\n                    {runnerResult.points_final || runnerResult.finish_time\n                      ? `+${runnerResult.points_bonus}`\n                      : \"\"}\n                  </TableCell>\n                  <TableCell key={`runner${runner.id}penalty`}>\n                    {runnerResult.points_final || runnerResult.finish_time\n                      ? `${runnerResult.points_penalty}`\n                      : \"\"}\n                  </TableCell>\n                  <TableCell key={`runner${runner.id}points`}>\n                    {runnerResult.points_final || runnerResult.finish_time\n                      ? `${runnerResult.points_final}`\n                      : \"\"}\n                  </TableCell>\n                  <TableCell key={`runner${runner.id}time`}>\n                    {statusOkOrNc\n                      ? runner.stage.finish_time != null\n                        ? parseSecondsToMMSS(runner.stage.time_seconds)\n                        : \"-\"\n                      : t(`ResultsStage.statusCodes.${status}`)}\n                  </TableCell>\n                  {controlNumbers?.map((control) => {\n                    return (\n                      <TableCell key={`runner${runner.id}control${control}`}>\n                        {runner.stage.points_final || runner.stage.finish_time ? (\n                          <ControlBadge\n                            number={control}\n                            punched={runnerPunchedControls.includes(control)}\n                          />\n                        ) : (\n                          \"\"\n                        )}\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n}\n","import { ProcessedRunnerModel } from \"../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { getRunnersInStage } from \"../../../../../services/EventService.ts\"\nimport { sortRunners } from \"../../../../../shared/sortingFunctions/sortRunners.ts\"\nimport { processRunnerData } from \"../../../../../components/VirtualTicket/shared/virtualTicketFunctions.ts\"\nimport { getUniqueStationNumbers } from \"../shared/Functions.ts\"\n\n/**\n * Query and process (compute splits) of runners by classes\n *\n * This function is just a wrapper of other function that make each step of the\n * query and process pipeline to give specific processing for each orienteering\n * discipline.\n * @param eventId\n * @param stageId\n * @param classId\n */\nexport async function getRoganineRunnersByClass(\n  eventId: string,\n  stageId: string,\n  classId: string,\n): Promise<[ProcessedRunnerModel[], bigint[]]> {\n  // Make query\n  const runnersPage = await getRunnersInStage(eventId, stageId, classId, undefined)\n  let runnersList = runnersPage.data\n\n  // Process runners\n  runnersList = sortRunners(runnersList)\n  const processedRunnersList = processRunnerData(runnersList)\n\n  // Compute controls\n  const controls = getUniqueStationNumbers(processedRunnersList)\n\n  // return\n  return [processedRunnersList, controls]\n}\n\nexport async function getRoganineRunnersByClub(\n  eventId: string,\n  stageId: string,\n  clubId: string,\n): Promise<[ProcessedRunnerModel[], bigint[]]> {\n  // Make query\n  const runnersPage = await getRunnersInStage(eventId, stageId, undefined, clubId)\n  let runnersList = runnersPage.data\n\n  // Process runners\n  runnersList = sortRunners(runnersList)\n  const processedRunnersList = processRunnerData(runnersList)\n\n  return [processedRunnersList, []]\n}\n","import { useTranslation } from \"react-i18next\"\nimport StageLayout from \"../../components/Layout/StageLayout.tsx\"\nimport ResultTabs from \"../../components/ResultTabs.tsx\"\nimport { BottomNavigationAction } from \"@mui/material\"\nimport EmojiEventsIcon from \"@mui/icons-material/EmojiEvents\"\nimport TimelineIcon from \"@mui/icons-material/Timeline\"\nimport RogaineResults from \"./pages/RogaineResults/RogaineResults.tsx\"\nimport RogainePoints from \"./pages/RogainePoints/RogainePoints.tsx\"\nimport { useFetchClasses } from \"../../../../shared/hooks.ts\"\nimport { useParams } from \"react-router-dom\"\nimport { getRoganineRunnersByClass, getRoganineRunnersByClub } from \"./services/RogaineService.ts\"\nimport { useQuery } from \"react-query\"\nimport { ProcessedRunnerModel } from \"../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { AxiosError } from \"axios\"\nimport { RunnerModel } from \"../../../../../../shared/EntityTypes.ts\"\nimport { useCallback } from \"react\"\n\nconst menu_options_labels = [\"results\", \"points\"]\n\nexport default function Rogaine() {\n  const { t } = useTranslation()\n\n  // Get stage's and event's ids\n  const { eventId, stageId } = useParams()\n  if (!eventId || !stageId) {\n    throw new Error(\"Event Id or Stage Id is missing\")\n  }\n\n  // Get classes\n  const {\n    activeItem,\n    classesQuery,\n    clubsQuery,\n    isClass,\n    setClassClubId,\n    refresh: refreshClassesClubs,\n  } = useFetchClasses()\n\n  // Fetch runners\n  const runnersQueryByClasses = useQuery<\n    [ProcessedRunnerModel[], bigint[]],\n    AxiosError<RunnerModel[]>\n  >(\n    [eventId, stageId, \"results\", \"classes\", activeItem?.id],\n    () => (activeItem ? getRoganineRunnersByClass(eventId, stageId, activeItem.id) : [[], []]),\n    {\n      enabled: !!activeItem && isClass,\n      refetchOnWindowFocus: false,\n    },\n  )\n\n  const runnersQueryByClubs = useQuery<\n    [ProcessedRunnerModel[], bigint[]],\n    AxiosError<RunnerModel[]>\n  >(\n    [eventId, stageId, \"results\", \"clubs\", activeItem?.id],\n    () => (activeItem ? getRoganineRunnersByClub(eventId, stageId, activeItem.id) : [[], []]),\n    {\n      enabled: !!activeItem && !isClass,\n      refetchOnWindowFocus: false,\n    },\n  )\n\n  // Handle re-fetching\n  const handleRefreshClick = useCallback(() => {\n    refreshClassesClubs()\n\n    if (isClass) {\n      void runnersQueryByClasses.refetch()\n    } else {\n      void runnersQueryByClubs.refetch()\n    }\n  }, [refreshClassesClubs, runnersQueryByClasses, runnersQueryByClubs, isClass])\n\n  return (\n    <StageLayout\n      handleRefreshClick={handleRefreshClick}\n      activeItem={activeItem}\n      isClass={isClass}\n      classesQuery={classesQuery}\n      clubsQuery={clubsQuery}\n      setActiveClassClub={setClassClubId}\n    >\n      <ResultTabs\n        defaultMenu={0}\n        menuOptions={[\n          <BottomNavigationAction\n            key={\"rogaineRseultsMenu\"}\n            label={t(\"StageHeader.Results\")}\n            icon={<EmojiEventsIcon />}\n          />,\n          <BottomNavigationAction\n            key={\"RogaineScorePointsMenu\"}\n            label={t(\"StageHeader.ScorePoints\")}\n            icon={<TimelineIcon />}\n          />,\n        ]}\n        menuOptionsLabels={menu_options_labels}\n      >\n        <RogaineResults\n          runnersQuery={isClass ? runnersQueryByClasses : runnersQueryByClubs}\n          activeItem={activeItem}\n          isClass={isClass}\n          setClassClubId={setClassClubId}\n        />\n        <RogainePoints\n          runnersQuery={isClass ? runnersQueryByClasses : runnersQueryByClubs}\n          activeItem={activeItem}\n          isClass={isClass}\n        />\n      </ResultTabs>\n    </StageLayout>\n  )\n}\n"],"names":["RogaineVirtualTicketPointsBanner","runnerResult","t","useTranslation","titleStyles","fontWeight","fontSize","gridStyles","display","textStyles","marginLeft","status","parseResultStatus","status_code","_Fragment","children","_jsxs","Grid","style","item","xs","_jsx","Typography","points_final","finish_time","points_bonus","points_penalty","sx","justifyContent","StartTime","startTime","start_time","RaceTime","isFinalTime","hasChipDownload","time_seconds","RogaineVirtualTicketSplit","split","index","width","backgroundColor","VirtualTicketControl","control","order_number","points","gridWidth","textAlign","time","parseSecondsToMMSS","cumulative_time","RogaineVirtualTicket","isTicketOpen","runner","handleCloseTicket","setClassClubId","headersStyles","VirtualTicketContainer","VirtualTicketHeader","VirtualTicketRunnerInfo","stage","VirtualTicketSplits","download","isDNS","runnerService","variant","splits","map","id","RogainePoints","props","isVirtualTicketOpen","selectedRunner","handleRowClick","handleCloseVirtualTicket","useVirtualTicket","runnersList","runnersQuery","data","activeItem","isFetching","isLoading","ResultsListSkeleton","isError","GeneralErrorFallback","ResultListContainer","statusOkOrNc","RESULT_STATUS_TEXT","ok","nc","hasDownload","hasChipDownloadFunction","ResultListItem","onClick","Box","flexShrink","flexDirection","alignItems","flexGrow","RacePosition","position","isNC","is_nc","ParticipantName","name","full_name","subtitle","isClass","getClubName","getClassName","displayStatus","ChooseClassMsg","getUniqueStationNumbers","runners","stationNumbers","b","ControlBadge","number","punched","height","borderRadius","borderColor","undefined","border","color","toString","OnlyForClassesMsg","Alert","severity","AlertTitle","controlNumbers","TableContainer","flex","Table","TableHead","TableRow","TableCell","controlNumber","TableBody","runnerPunchedControls","md","minWidth","includes","getRoganineRunnersByClass","eventId","stageId","classId","getRunnersInStage","sortRunners","processedRunnersList","processRunnerData","controls","getRoganineRunnersByClub","clubId","menu_options_labels","Rogaine","useParams","Error","classesQuery","clubsQuery","refresh","refreshClassesClubs","useFetchClasses","runnersQueryByClasses","useQuery","enabled","refetchOnWindowFocus","runnersQueryByClubs","handleRefreshClick","useCallback","refetch","StageLayout","setActiveClassClub","ResultTabs","defaultMenu","menuOptions","BottomNavigationAction","label","icon","EmojiEventsIcon","TimelineIcon","menuOptionsLabels","RogaineResults"],"mappings":"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"}