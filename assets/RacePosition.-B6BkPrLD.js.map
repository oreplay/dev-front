{"version":3,"file":"RacePosition.-B6BkPrLD.js","sources":["../../node_modules/@mui/icons-material/esm/GroupsOutlined.js","../../node_modules/@mui/icons-material/esm/LeaderboardOutlined.js","../../node_modules/@mui/icons-material/esm/Refresh.js","../../node_modules/@mui/icons-material/esm/Search.js","../../src/pages/Results/pages/Results/components/Layout/components/ClassSelector/components/autocompleteList/components/AutocompleteListSkeletonItem.tsx","../../src/components/ListSkeleton/ListSkeleton.tsx","../../src/pages/Results/pages/Results/components/Layout/components/ClassSelector/components/autocompleteList/components/AutocompleteListContainer.tsx","../../src/pages/Results/pages/Results/components/Layout/components/ClassSelector/components/autocompleteList/components/AutocompleteListItem.tsx","../../src/pages/Results/pages/Results/components/Layout/components/ClassSelector/components/autocompleteList/components/AutocompleteListSearchBar.tsx","../../src/pages/Results/pages/Results/components/Layout/components/ClassSelector/components/autocompleteList/AutocompleteList.tsx","../../src/pages/Results/pages/Results/components/Layout/components/ClassSelector/ClassSelector.tsx","../../src/pages/Results/pages/Results/components/WrongResultsFileUploadedMsg.tsx","../../src/pages/Results/pages/Results/components/Layout/StageLayout.tsx","../../src/pages/Results/shared/constants.ts","../../src/pages/Results/pages/Results/shared/functions.ts","../../src/domain/services/RunnerService.ts","../../src/pages/Results/shared/sortingFunctions/compareFunctions.ts","../../src/pages/Results/shared/sortingFunctions/sortRunners.ts","../../src/pages/Results/shared/context.ts","../../src/pages/Results/components/NowProvider.tsx","../../src/pages/Results/components/ResultsList/ResultListContainer.tsx","../../src/pages/Results/components/ResultsList/ResultListSkeleton.tsx","../../src/pages/Results/pages/Results/components/ChooseClassMsg.tsx","../../src/pages/Results/pages/Results/pages/FootO/pages/Splits/components/FootOSplitsTable/shared/footOSplitsTablefunctions.ts","../../src/pages/Results/pages/Results/shared/functions/runnerProccesing.ts","../../src/pages/Results/components/VirtualTicket/shared/virtualTicketFunctions.ts","../../src/pages/Results/components/RacePosition..tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M4 13c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2m1.13 1.1c-.37-.06-.74-.1-1.13-.1-.99 0-1.93.21-2.78.58C.48 14.9 0 15.62 0 16.43V18h4.5v-1.61c0-.83.23-1.61.63-2.29M20 13c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2m4 3.43c0-.81-.48-1.53-1.22-1.85-.85-.37-1.79-.58-2.78-.58-.39 0-.76.04-1.13.1.4.68.63 1.46.63 2.29V18H24zm-7.76-2.78c-1.17-.52-2.61-.9-4.24-.9s-3.07.39-4.24.9C6.68 14.13 6 15.21 6 16.39V18h12v-1.61c0-1.18-.68-2.26-1.76-2.74M8.07 16c.09-.23.13-.39.91-.69.97-.38 1.99-.56 3.02-.56s2.05.18 3.02.56c.77.3.81.46.91.69zM12 8c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1m0-2c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'GroupsOutlined');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 11V3H8v6H2v12h20V11zm-6-6h4v14h-4zm-6 6h4v8H4zm16 8h-4v-6h4z\"\n}), 'LeaderboardOutlined');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4z\"\n}), 'Refresh');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","import { Skeleton } from \"@mui/material\"\n\nexport default function AutocompleteListSkeletonItem() {\n  return <Skeleton variant={\"rounded\"} width={\"100%\"} height={\"48px\"} />\n}\n","import { useEffect, useRef, useState, ComponentType, CSSProperties } from \"react\"\nimport { Stack } from \"@mui/material\"\n\ninterface ListSkeletonProps {\n  SkeletonItem: ComponentType\n  gap: string\n  style?: CSSProperties\n  className?: string\n  minItems?: number\n}\n\nexport default function ListSkeleton({\n  SkeletonItem,\n  style,\n  className,\n  gap,\n  minItems,\n}: ListSkeletonProps) {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const skeletonRef = useRef<HTMLDivElement>(null)\n  const [skeletonHeight, setSkeletonHeight] = useState<number | null>(null)\n  const [skeletonCount, setSkeletonCount] = useState(0)\n\n  // Measure the skeleton item height\n  useEffect(() => {\n    if (!skeletonRef.current) return\n\n    const resizeObserver = new ResizeObserver(([entry]) => {\n      if (entry.contentRect.height > 0) {\n        setSkeletonHeight(entry.contentRect.height)\n      }\n    })\n\n    resizeObserver.observe(skeletonRef.current)\n\n    return () => {\n      resizeObserver.disconnect()\n    }\n  }, [])\n\n  // Once we have the height, calculate how many fit\n  useEffect(() => {\n    if (skeletonHeight && containerRef.current) {\n      const containerHeight = containerRef.current.clientHeight\n      let count = Math.floor(containerHeight / skeletonHeight)\n      if (minItems && count < Math.floor(minItems)) {\n        count = minItems\n      }\n\n      setSkeletonCount(count)\n    }\n  }, [minItems, skeletonHeight])\n\n  return (\n    <Stack\n      ref={containerRef}\n      style={{ height: \"100%\", width: \"100%\", overflow: \"hidden\", ...style }}\n      className={className}\n      direction=\"column\"\n      gap={gap}\n    >\n      {/* Render one item offscreen just to measure height */}\n      {!skeletonHeight && (\n        <div ref={skeletonRef} style={{ visibility: \"hidden\", position: \"absolute\" }}>\n          <SkeletonItem />\n        </div>\n      )}\n\n      {/* Render full list once height is known */}\n      {skeletonHeight &&\n        Array.from({ length: skeletonCount }).map((_, index) => <SkeletonItem key={index} />)}\n    </Stack>\n  )\n}\n","import { ReactNode } from \"react\"\nimport { List } from \"@mui/material\"\nimport AutocompleteListSkeletonItem from \"./AutocompleteListSkeletonItem.tsx\"\nimport ListSkeleton from \"../../../../../../../../../../../components/ListSkeleton/ListSkeleton.tsx\"\n\nexport default function AutocompleteListContainer({\n  children,\n  isLoading,\n}: {\n  children: ReactNode\n  isLoading?: boolean\n}) {\n  if (isLoading) {\n    return <ListSkeleton SkeletonItem={AutocompleteListSkeletonItem} gap={\"8px\"} />\n  } else {\n    return <List sx={{ padding: 0, flexGrow: 1 }}>{children}</List>\n  }\n}\n","import { ListItemButton, ListItemText } from \"@mui/material\"\n\ninterface AutocompleteListItemProps {\n  name: string\n  onClick?: () => void\n}\n\nexport default function AutocompleteListItem({ name, onClick }: AutocompleteListItemProps) {\n  return (\n    <ListItemButton onClick={onClick}>\n      <ListItemText>{name}</ListItemText>\n    </ListItemButton>\n  )\n}\n","import { IconButton, InputAdornment, TextField } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\nimport { ClearIcon } from \"@mui/x-date-pickers\"\nimport SearchIcon from \"@mui/icons-material/Search\"\nimport Tooltip from \"@mui/material/Tooltip\"\n\ninterface AutocompleteListSearchBarProps {\n  value: string\n  setValue: (query: string) => void\n}\n\nexport default function AutocompleteListSearchBar({\n  value,\n  setValue,\n}: AutocompleteListSearchBarProps) {\n  const { t } = useTranslation()\n\n  return (\n    <TextField\n      placeholder={t(\"Search.Search\")}\n      variant=\"standard\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      sx={{ marginY: 2, width: \"100%\" }}\n      slotProps={{\n        input: {\n          sx: { mx: \"10px\", mt: \"5px\" },\n          endAdornment: value ? (\n            <InputAdornment position=\"end\">\n              <Tooltip title={t(\"Search.ClearSearch\")}>\n                <IconButton\n                  size=\"small\"\n                  onClick={() => setValue(\"\")}\n                  aria-label={t(\"Clear search\")}\n                >\n                  <ClearIcon />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ) : (\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n        },\n      }}\n    />\n  )\n}\n","import AutocompleteListContainer from \"./components/AutocompleteListContainer.tsx\"\nimport { Box } from \"@mui/material\"\nimport AutocompleteListItem from \"./components/AutocompleteListItem.tsx\"\nimport { useMemo, useState } from \"react\"\nimport AutocompleteListSearchBar from \"./components/AutocompleteListSearchBar.tsx\"\n\ninterface AutocompleteListProps<T> {\n  itemList: T[]\n  nameExtractor: (item: T) => string\n  keyExtractor: (item: T) => string\n  handleClick: (item: T) => void\n  normalizeQuery?: (query: string) => string\n  isLoading?: boolean\n}\n\nexport default function AutocompleteList<T>({\n  itemList,\n  nameExtractor,\n  keyExtractor,\n  handleClick,\n  normalizeQuery,\n  isLoading,\n}: AutocompleteListProps<T>) {\n  // Internal state\n  const [query, setQuery] = useState<string>(\"\")\n\n  const internalNormalizeQuery = useMemo(\n    () =>\n      normalizeQuery\n        ? (query: string) => normalizeQuery(query).toLowerCase()\n        : (query: string) => query.toLowerCase(),\n    [normalizeQuery],\n  )\n\n  // Filter the item list based on the search query\n  const displayedList = useMemo(() => {\n    const normalizeQuery = internalNormalizeQuery(query)\n    return itemList.filter((item) =>\n      internalNormalizeQuery(nameExtractor(item)).includes(normalizeQuery),\n    )\n  }, [itemList, query, nameExtractor, internalNormalizeQuery])\n\n  // Actual component\n  return (\n    <Box sx={{ padding: 0, width: \"100%\", height: \"100%\" }}>\n      <AutocompleteListSearchBar value={query} setValue={setQuery} />\n      <AutocompleteListContainer isLoading={isLoading}>\n        {displayedList.map((item) => {\n          return (\n            <AutocompleteListItem\n              key={keyExtractor(item)}\n              name={nameExtractor(item)}\n              onClick={() => handleClick(item)}\n            />\n          )\n        })}\n      </AutocompleteListContainer>\n    </Box>\n  )\n}\n","import {\n  Box,\n  Dialog,\n  DialogContent,\n  FormControl,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n  Tab,\n  Tabs,\n} from \"@mui/material\"\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\"\nimport { useTranslation } from \"react-i18next\"\nimport { ClassModel, ClubModel, Page } from \"../../../../../../../../shared/EntityTypes.ts\"\nimport { ReactNode, useEffect, useRef, useState } from \"react\"\nimport GroupsOutlinedIcon from \"@mui/icons-material/GroupsOutlined\"\nimport LeaderboardOutlinedIcon from \"@mui/icons-material/LeaderboardOutlined\"\nimport { UseQueryResult } from \"react-query\"\nimport AutocompleteList from \"./components/autocompleteList/AutocompleteList.tsx\"\nimport { useClassClubSearchParams } from \"../../../../../../shared/hooks.ts\"\nimport CloseIcon from \"@mui/icons-material/Close\"\n\ninterface ClassSelectorProps {\n  isClass: boolean\n  activeClassClub: ClassModel | ClubModel | null\n  setActiveClassClubId: (newActiveClassId: string, isClass: boolean) => void\n  classesQuery: UseQueryResult<Page<ClassModel>>\n  clubsQuery: UseQueryResult<Page<ClubModel>>\n}\n\ninterface TabPanelProps {\n  children?: ReactNode\n  index: number\n  value: number\n}\n\n// Auxiliary search normalize functions (to ignore some characters)\nconst ignoreDashes = (query: string) => query.replace(/-/g, \"\")\nconst ignoreDashesAndUnderscores = (query: string) => query.toLowerCase().replace(/[-_]/g, \"\")\n\nfunction CustomTabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <Box\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n      sx={{ height: \"100%\" }}\n    >\n      {value === index && <Box sx={{ height: \"100%\" }}>{children}</Box>}\n    </Box>\n  )\n}\n\nexport default function ClassSelector(props: ClassSelectorProps) {\n  const { t } = useTranslation()\n\n  // Internal states\n  const [isOpen, setIsOpen] = useState<boolean>(false)\n  const [currentTab, setCurrentTab] = useState<number>(0)\n\n  // Check if it should be opened or closed\n  const { getClassClubSearchParamName } = useClassClubSearchParams()\n\n  const hasInitialized = useRef(false)\n  useEffect(() => {\n    if (hasInitialized.current) return\n\n    const [item, isClassInSearchParam] = getClassClubSearchParamName()\n    hasInitialized.current = true\n\n    if (item !== null && isClassInSearchParam !== null) {\n      // Provided in the searchParam\n      if (isClassInSearchParam) {\n        // isClass\n        setCurrentTab(0)\n      } else {\n        // isClub\n        setCurrentTab(1)\n      }\n    } else {\n      // Prompt user to choose class\n      setIsOpen(true)\n    }\n  }, [getClassClubSearchParamName])\n\n  // Click handlers\n  const handleClassClick = (newClass: ClassModel): void => {\n    props.setActiveClassClubId(newClass.id, true)\n    setIsOpen(false)\n  }\n\n  const handleClubClick = (newClub: ClubModel): void => {\n    props.setActiveClassClubId(newClub.id, false)\n    setIsOpen(false)\n  }\n\n  // Actual component\n  return (\n    <Box>\n      <FormControl\n        sx={{\n          maxWidth: 300,\n          cursor: \"pointer\",\n        }}\n        onClick={() => setIsOpen(true)} // Clicking anywhere opens dialog\n      >\n        <InputLabel shrink={!!props.activeClassClub}>\n          {props.isClass ? t(\"ResultsStage.Class\") : t(\"ResultsStage.Club\")}\n        </InputLabel>\n        <OutlinedInput\n          readOnly\n          notched={!!props.activeClassClub}\n          value={props.activeClassClub?.short_name || \"\"}\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <ExpandMoreIcon />\n            </InputAdornment>\n          }\n          label={props.isClass ? t(\"ResultsStage.Class\") : t(\"ResultsStage.Club\")}\n          sx={{\n            pointerEvents: \"none\", // disable internal input interaction\n          }}\n          inputProps={{\n            tabIndex: -1,\n          }}\n        />\n      </FormControl>\n      <Dialog\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        maxWidth={\"xs\"}\n        sx={{\n          \"& .MuiDialog-paper\": {\n            height: \"90%\",\n            maxHeight: \"none\",\n          },\n        }}\n        fullWidth\n      >\n        <DialogContent sx={{ height: \"100%\" }}>\n          <Box\n            sx={{\n              display: \"inline-flex\",\n              justifyContent: \"space-between\",\n              width: \"100px\",\n              boxSizing: \"border-box\",\n            }}\n          >\n            <Box sx={{ flexShrink: 1, flexGrow: 1 }}>\n              <Tabs\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n                value={currentTab}\n                onChange={(_, newValue: number) => setCurrentTab(newValue)}\n              >\n                <Tab\n                  label={t(\"ResultsStage.Classes\")}\n                  icon={<LeaderboardOutlinedIcon />}\n                  iconPosition={\"start\"}\n                />\n                <Tab\n                  label={t(\"ResultsStage.Clubs\")}\n                  icon={<GroupsOutlinedIcon />}\n                  iconPosition={\"start\"}\n                />\n              </Tabs>\n            </Box>\n            <Box>\n              <IconButton\n                aria-label=\"close\"\n                onClick={() => setIsOpen(false)}\n                sx={{\n                  position: \"absolute\",\n                  right: 8,\n                  top: 8,\n                  color: (theme) => theme.palette.grey[500],\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </Box>\n          </Box>\n          <CustomTabPanel value={currentTab} index={0}>\n            <AutocompleteList\n              itemList={props.classesQuery.data ? props.classesQuery.data.data : []}\n              nameExtractor={(classItem: ClassModel) => classItem.short_name}\n              keyExtractor={(classItem: ClassModel) => classItem.id}\n              handleClick={handleClassClick}\n              normalizeQuery={ignoreDashes}\n              isLoading={props.classesQuery.isLoading || props.classesQuery.isFetching}\n            />\n          </CustomTabPanel>\n          <CustomTabPanel value={currentTab} index={1}>\n            <AutocompleteList\n              itemList={props.clubsQuery.data ? props.clubsQuery.data.data : []}\n              nameExtractor={(club: ClubModel) => club.short_name}\n              keyExtractor={(club: ClubModel) => club.id}\n              handleClick={handleClubClick}\n              normalizeQuery={ignoreDashesAndUnderscores}\n              isLoading={props.clubsQuery.isLoading || props.clubsQuery.isFetching}\n            />\n          </CustomTabPanel>\n        </DialogContent>\n      </Dialog>\n    </Box>\n  )\n}\n","import { Alert, AlertTitle, Box, Link } from \"@mui/material\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { useNavigate } from \"react-router-dom\"\n\nexport default function WrongResultsFileUploadedMsg() {\n  const { t } = useTranslation()\n  const navigate = useNavigate()\n\n  return (\n    <Box sx={{ marginBottom: \"2em\" }}>\n      <Alert severity=\"warning\">\n        <AlertTitle>{t(\"ResultsStage.WrongFileUploaded.Title\")}</AlertTitle>\n        <Trans i18nKey=\"ResultsStage.WrongFileUploaded.Msg\">\n          First part{\" \"}\n          <Link\n            onClick={() => {\n              void navigate(\"/organizers\")\n            }}\n          >\n            organizers\n          </Link>{\" \"}\n          Second part\n        </Trans>\n      </Alert>\n    </Box>\n  )\n}\n","import { Box, IconButton } from \"@mui/material\"\nimport ClassSelector from \"./components/ClassSelector/ClassSelector.tsx\"\nimport Tooltip from \"@mui/material/Tooltip\"\nimport RefreshIcon from \"@mui/icons-material/Refresh\"\nimport { useTranslation } from \"react-i18next\"\nimport { ClassModel, ClubModel, Page } from \"../../../../../../shared/EntityTypes.ts\"\nimport React from \"react\"\nimport { ErrorBoundary } from \"@sentry/react\"\nimport GeneralErrorFallback from \"../../../../../../components/GeneralErrorFallback.tsx\"\n//import NoDataInStageMsg from \"../NoDataInStageMsg.tsx\"\nimport WrongResultsFileUploadedMsg from \"../WrongResultsFileUploadedMsg.tsx\"\nimport { UseQueryResult } from \"react-query\"\n\ntype StageLayoutProps = {\n  handleRefreshClick: () => void\n  isClass: boolean\n  classesQuery: UseQueryResult<Page<ClassModel>>\n  clubsQuery: UseQueryResult<Page<ClubModel>>\n  setActiveClassClub: (newActiveClassId: string, isClass: boolean) => void\n  activeItem: ClassModel | ClubModel | null\n  isWrongFileUploaded?: boolean\n  children: React.ReactNode\n}\n\nexport default function StageLayout(props: StageLayoutProps) {\n  const { t } = useTranslation()\n\n  //if (props.classesList.length === 0 && !props.areClassesLoading) {\n  //  return <NoDataInStageMsg />\n  //}\n\n  return (\n    <Box\n      sx={{\n        height: \"calc(100% - 64px)\",\n        padding: \"24px 24px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        minHeight: 0,\n      }}\n    >\n      {props.isWrongFileUploaded ? <WrongResultsFileUploadedMsg /> : <></>}\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          maxWidth: \"600px\",\n        }}\n      >\n        <ClassSelector\n          activeClassClub={props.activeItem}\n          isClass={props.isClass}\n          setActiveClassClubId={props.setActiveClassClub}\n          classesQuery={props.classesQuery}\n          clubsQuery={props.clubsQuery}\n        />\n        <Tooltip title={t(\"ResultsStage.Refresh\")}>\n          <IconButton onClick={props.handleRefreshClick}>\n            <RefreshIcon />\n          </IconButton>\n        </Tooltip>\n      </Box>\n      <Box sx={{ marginTop: \"12px\", flex: 1, paddingBottom: \"56px\" }}>\n        <ErrorBoundary fallback={<GeneralErrorFallback displayMsg />}>\n          {props.children}\n        </ErrorBoundary>\n      </Box>\n    </Box>\n  )\n}\n","export const RESULT_STATUS = {\n  ok: \"0\",\n  dns: \"1\", //did not start\n  dnf: \"2\", //did not finish\n  mp: \"3\", // missing punch\n  dsq: \"4\", //disqualified\n  ot: \"5\", //out of time\n  nc: \"9\", // not competitive\n}\n\nexport const RESULT_STATUS_TEXT = {\n  ok: \"ok\",\n  dns: \"dns\", //did not start\n  dnf: \"dnf\", //did not finish\n  mp: \"mp\", // missing punch\n  dsq: \"dsq\", //disqualified\n  ot: \"ot\", //out of time\n  nc: \"nc\", // not competitive\n}\n\nexport const RESULT_STATUS_PRIORITY: Record<string, number> = {\n  [RESULT_STATUS.ok]: 1,\n  [RESULT_STATUS.nc]: 2,\n  [RESULT_STATUS.ot]: 3,\n  [RESULT_STATUS.mp]: 4,\n  [RESULT_STATUS.dnf]: 5,\n  [RESULT_STATUS.dsq]: 6,\n  [RESULT_STATUS.dns]: 7,\n}\n","import { RunnerModel, RunnerResultModel } from \"../../../../../shared/EntityTypes.ts\"\nimport {\n  ProcessedRunnerModel,\n  ProcessedRunnerResultModel,\n} from \"../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { UPLOAD_TYPES } from \"./constants.ts\"\nimport { RESULT_STATUS } from \"../../../shared/constants.ts\"\n\n/** Check if a runner has a final result\n *\n * A result is considered final if the runner has downloaded the chip and has\n * gone throw code checks. It means, that the result came from a SplitTimes file\n * not an intermediate results file\n *\n * @param runner Runner we want to check\n */\nexport function hasChipDownload(\n  runner: RunnerModel | ProcessedRunnerModel | RunnerResultModel | ProcessedRunnerResultModel,\n): boolean {\n  let uploadType: string\n  if (isRunnerModel(runner)) uploadType = runner.stage.upload_type\n  else {\n    uploadType = runner.upload_type\n  }\n\n  switch (uploadType) {\n    case UPLOAD_TYPES.START_TIMES:\n      return false\n\n    case UPLOAD_TYPES.ONLINE_SPLITS:\n      return false\n\n    case UPLOAD_TYPES.SPLIT_RESULT:\n      return true\n\n    case UPLOAD_TYPES.FINAL_RESULT:\n      return true\n\n    default:\n      throw new Error(`Unknown upload_type ${uploadType}`)\n  }\n}\n\n/**\n * Auxiliary type predicative\n * @param runner\n */\nfunction isRunnerModel(\n  runner: RunnerModel | ProcessedRunnerModel | RunnerResultModel | ProcessedRunnerResultModel,\n): runner is RunnerModel | ProcessedRunnerModel {\n  return \"stage\" in runner\n}\n\n/**\n * Check if a runner has \"no classify\" status\n *\n * @param runner The runner to be checked\n */\nexport function isRunnerNC(runner: RunnerModel | ProcessedRunnerModel): boolean {\n  return runner.stage?.status_code === RESULT_STATUS.nc || runner.is_nc //TODO: Handle ranking runners\n}\n\n/**\n * Find if a wrong IOF XML file created a result in any of this runners\n *\n * Wrong files are those that upload final results without splits\n * @param runnerList List of runners to check\n */\nexport function isWrongFileUploaded(runnerList: RunnerModel[] | ProcessedRunnerModel[]): boolean {\n  const filteredRunners: (RunnerModel | ProcessedRunnerModel)[] = runnerList.filter(\n    (runner) => runner.stage.upload_type === UPLOAD_TYPES.FINAL_RESULT,\n  )\n\n  return filteredRunners.length !== 0 && runnerList.length !== 0\n}\n","import {\n  ProcessedParticipantModel,\n  ProcessedRunnerModel,\n} from \"../../pages/Results/components/VirtualTicket/shared/EntityTypes.ts\"\nimport { TFunction } from \"i18next\"\nimport { ParticipantModel, RunnerModel } from \"../../shared/EntityTypes.ts\"\nimport { RESULT_STATUS } from \"../../pages/Results/shared/constants.ts\"\nimport { isRunnerNC } from \"../../pages/Results/pages/Results/shared/functions.ts\"\n\nconst getClubName = (\n  runner: ProcessedRunnerModel,\n  t: TFunction<\"translation\", undefined>,\n): string => {\n  const noClubMsg: string = t(\"ResultsStage.NoClubMsg\")\n  return runner.club ? runner.club.short_name : noClubMsg\n}\n\nconst compareLegNumber = (\n  a: ParticipantModel | ProcessedParticipantModel,\n  b: ParticipantModel | ProcessedParticipantModel,\n): number => {\n  return (a?.stage?.leg_number || 0) - (b?.stage?.leg_number || 0)\n}\n\nconst getClassName = (runner: ProcessedRunnerModel) => {\n  return runner.class.short_name\n}\n\nconst isDNS = (runner: ProcessedParticipantModel | ParticipantModel) =>\n  runner.stage?.status_code === RESULT_STATUS.dns //TODO: Handle ranking runners\n\nconst isNC = (runner: ProcessedRunnerModel | RunnerModel): boolean => {\n  return isRunnerNC(runner) // TODO: Move this logic here\n}\n\nexport const runnerService = {\n  getClubName,\n  getClassName,\n  compareLegNumber,\n  isDNS,\n  isNC,\n}\n","import { RunnerModel } from \"../../../../shared/EntityTypes.ts\"\nimport { ProcessedRunnerModel } from \"../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { RESULT_STATUS } from \"../constants.ts\"\nimport { runnerService } from \"../../../../domain/services/RunnerService.ts\"\n\n/**\n * This helper functions assigns each status code a number with the priority it should appear on result\n * @param status A valid RUNNER_STATUS\n * @param position Position of the runner\n */\nfunction statusOrder(status: string | null, position: number | null) {\n  switch (status) {\n    case RESULT_STATUS.ok:\n      if (position == 0) {\n        return 2\n      } else {\n        return 0\n      }\n    case RESULT_STATUS.ot:\n      return 1\n    case RESULT_STATUS.mp:\n      return 3\n    case RESULT_STATUS.nc:\n      return 0\n    case RESULT_STATUS.dnf:\n      return 4\n    case RESULT_STATUS.dsq:\n      return 5\n    case RESULT_STATUS.dns:\n      return 6\n    default:\n      return 10\n  }\n}\n\nfunction byStatus(\n  aStatusCode: string | null,\n  bStatusCode: string | null,\n  aPosition: number | null,\n  bPosition: number | null,\n) {\n  const statusA = statusOrder(aStatusCode, aPosition)\n  const statusB = statusOrder(bStatusCode, bPosition)\n\n  if (statusA !== undefined && statusB !== undefined) {\n    return statusA - statusB // Smaller status comes first\n  } else if (!statusA) {\n    return 1\n  } else {\n    return -1\n  }\n}\n\nfunction byStageStatus(\n  a: RunnerModel | ProcessedRunnerModel,\n  b: RunnerModel | ProcessedRunnerModel,\n): number {\n  const aStatus = a.stage?.status_code\n  const bStatus = b.stage?.status_code\n  const aPosition = a.stage?.position\n  const bPosition = b.stage?.position\n\n  return byStatus(aStatus, bStatus, aPosition, bPosition)\n}\n\n/**\n * Helper function for sorting. Compare two runners according to their position.\n * If two runners have the same position but one is not competing, the non-competing\n * is placed at the bottom.\n * @param a First runner of the comparison\n * @param b Second runner of the comparison\n * @param isANC\n * @param isBNC\n */\nfunction byPosition(\n  a: number | null | undefined,\n  b: number | null | undefined,\n  isANC: boolean,\n  isBNC: boolean,\n): number {\n  if (!!a && !!b) {\n    if (a === b) {\n      return runnerCompareFunctions.byIsNC(isANC, isBNC)\n    } else {\n      return a - b\n    }\n  } else if (a) {\n    return -1\n  } else if (b) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\n/**\n * Helper function for sorting. Compare two runners according to their position.\n * If two runners have the same position but one is not competing, the non-competing\n * is placed at the bottom\n *\n * @param a First runner of the comparison\n * @param b Second runner of the comparison\n */\nfunction byStagePosition(\n  a: RunnerModel | ProcessedRunnerModel,\n  b: RunnerModel | ProcessedRunnerModel,\n): number {\n  const posA = a.stage?.position\n  const posB = b.stage?.position\n\n  if (posA !== 0 && posB !== 0) {\n    return byPosition(posA, posB, runnerService.isNC(a), runnerService.isNC(b))\n  } else if (posA === 0 && posB === 0) {\n    return 0\n  } else if (posA === 0) {\n    return 1\n  } else if (posB === 0) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/**\n * Helper function for sorting. Compare two runners according to their overall position.\n * If two runners have the same position but one is not competing, the non-competing\n * is placed at the bottom\n * @param a\n * @param b\n */\nfunction byOverallPosition(\n  a: RunnerModel | ProcessedRunnerModel,\n  b: RunnerModel | ProcessedRunnerModel,\n): number {\n  const aPosition = a.overalls?.overall.position\n  const bPosition = b.overalls?.overall.position\n\n  return byPosition(aPosition, bPosition, runnerService.isNC(a), runnerService.isNC(b))\n}\n\n/**\n * Helper function for sorting. Compare two runners according to their full name. Runners are sorted\n * in alphabetical order\n * @param a First runner of the comparison\n * @param b Second runner of the comparison\n */\nfunction byName(\n  a: RunnerModel | ProcessedRunnerModel,\n  b: RunnerModel | ProcessedRunnerModel,\n): number {\n  const nameA = a.full_name.toLowerCase()\n  const nameB = b.full_name.toLowerCase()\n\n  return nameA.localeCompare(nameB)\n}\n\n/**\n * Helper function for sorting. Compare two runners according to their start time\n *\n * If `ascending = true` runners are sorted by ascending start time\n * If `ascending = false` runners are sorted by descending start time\n * Runners without start time go to the end in any case\n * @param a First runner of the comparison\n * @param b Second runner of the comparison\n * @param ascending\n */\nfunction byStartTime(\n  a: RunnerModel | ProcessedRunnerModel,\n  b: RunnerModel | ProcessedRunnerModel,\n  ascending: boolean = true,\n): number {\n  const startTimeA = a.stage?.start_time\n  const startTimeB = b.stage?.start_time\n\n  if (!!startTimeA && !!startTimeB) {\n    return ascending ? startTimeA.localeCompare(startTimeB) : startTimeB.localeCompare(startTimeA)\n  } else if (startTimeA) {\n    return -1\n  } else if (startTimeB) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\n/**\n * Helper function for sorting. Compare two runners according to being not competing (NC). NC goes\n * to the end\n * @param isANC is the first runner in the comparison NC\n * @param isBNC is the second runner in the comparison NC\n */\nfunction byIsNC(isANC: boolean, isBNC: boolean): number {\n  if (isANC && isBNC) {\n    return 0\n  } else if (isANC) {\n    return 1\n  } else if (isBNC) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\nconst runnerCompareFunctions = {\n  byStagePosition: byStagePosition,\n  byStageStatus: byStageStatus,\n  byOverallPosition: byOverallPosition,\n  byName: byName,\n  byStartTime: byStartTime,\n  byIsNC: byIsNC,\n}\n\nexport default runnerCompareFunctions\n","import { RESULT_STATUS, RESULT_STATUS_TEXT } from \"../constants.ts\"\nimport { RunnerModel } from \"../../../../shared/EntityTypes.ts\"\nimport runnerCompareFunctions from \"./compareFunctions.ts\"\n\nexport function parseResultStatus(status: string): string {\n  switch (status) {\n    case RESULT_STATUS.ok:\n      return RESULT_STATUS_TEXT.ok\n    case RESULT_STATUS.dns:\n      return RESULT_STATUS_TEXT.dns\n    case RESULT_STATUS.dnf:\n      return RESULT_STATUS_TEXT.dnf\n    case RESULT_STATUS.mp:\n      return RESULT_STATUS_TEXT.mp\n    case RESULT_STATUS.dsq:\n      return RESULT_STATUS_TEXT.dsq\n    case RESULT_STATUS.ot:\n      return RESULT_STATUS_TEXT.ot\n    case RESULT_STATUS.nc:\n      return RESULT_STATUS_TEXT.nc\n    default:\n      return \"unknown\" + status\n  }\n}\n\n/**\n * This is a helper function to compute how two objects compare given a list of compare functions\n * that define suborders\n * @param a The first element of the comparison\n * @param b The second element of the comparison\n * @param compareFunctionList The return value of each of the functions should be a number whose\n * sign indicates the relative order of the two elements: negative if `a` is less than `b`, positive\n * if `a` is greater than `b`, and zero if they are equal. `NaN` is treated as 0.\n */\nexport function multiLevelCompare<T>(\n  a: T,\n  b: T,\n  compareFunctionList: ((a: T, b: T) => number)[],\n): number {\n  let compareResult = 0\n  for (let i = 0; i < compareFunctionList.length && compareResult == 0; ++i) {\n    compareResult = compareFunctionList[i](a, b)\n  }\n\n  return compareResult\n}\n\n/**\n * Sort a list of runners\n * @param runnersList List of runners to be ordered\n */\nexport function sortRunners(runnersList: RunnerModel[]) {\n  return runnersList.sort((a, b) => {\n    return multiLevelCompare(a, b, [\n      runnerCompareFunctions.byStageStatus,\n      runnerCompareFunctions.byStagePosition,\n      runnerCompareFunctions.byOverallPosition,\n      (a, b) => runnerCompareFunctions.byStartTime(a, b, false), // reverse\n      runnerCompareFunctions.byName,\n    ])\n  })\n}\n","import { createContext } from \"react\"\nimport { DateTime } from \"luxon\"\n\nexport const NowContext = createContext<DateTime>(DateTime.now())\n","import { ReactNode, useEffect, useState } from \"react\"\nimport { DateTime } from \"luxon\"\nimport { NowContext } from \"../shared/context\"\n\ntype NowProviderProps = {\n  children: ReactNode\n}\n\nexport default function NowProvider({ children }: NowProviderProps) {\n  const [now, setNow] = useState<DateTime>(DateTime.now())\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setNow(DateTime.now())\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  return <NowContext.Provider value={now}>{children}</NowContext.Provider>\n}\n","import { ReactNode, FC } from \"react\"\nimport { Box, Stack } from \"@mui/material\"\nimport NowProvider from \"../NowProvider.tsx\"\n\ninterface ResultListContainerProps {\n  children: ReactNode\n}\n\nconst ResultListContainer: FC<ResultListContainerProps> = ({\n  children,\n}: ResultListContainerProps) => {\n  return (\n    <NowProvider>\n      <Box\n        sx={{\n          height: \"100%\",\n          marginBottom: \"2rem\",\n          maxWidth: \"600px\",\n          width: \"100%\",\n        }}\n      >\n        <Stack direction={\"column\"} spacing={2} sx={{ flexWrap: \"wrap\" }}>\n          {children}\n        </Stack>\n      </Box>\n    </NowProvider>\n  )\n}\n\nexport default ResultListContainer\n","import { Box, Skeleton, Stack } from \"@mui/material\"\nimport { useEffect, useRef, useState } from \"react\"\n\nfunction ResultListItemSkeleton() {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContents: \"space-between\",\n        maxWidth: 600,\n        width: \"100%\",\n        gap: \"5px\",\n        borderBottom: \"1px solid #f2f2f2\",\n        paddingY: \".8em\",\n      }}\n    >\n      <Skeleton\n        sx={{ bgcolor: \"gray.10\" }}\n        variant=\"rounded\"\n        height={24}\n        width={\"100%\"}\n        animation={\"wave\"}\n      />\n      <Skeleton\n        sx={{ bgcolor: \"gray.10\" }}\n        variant=\"rounded\"\n        height={20}\n        width={\"100%\"}\n        animation={\"wave\"}\n      />\n    </Box>\n  )\n}\n\nexport default function ResultsListSkeleton() {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [skeletonCount, setSkeletonCount] = useState(0)\n\n  useEffect(() => {\n    const updateSkeletonCount = () => {\n      if (containerRef.current) {\n        const containerHeight = containerRef.current.clientHeight\n        const skeletonHeight = 75 // Set the height of each skeleton (e.g., 40px)\n        const count = Math.floor(containerHeight / skeletonHeight)\n        setSkeletonCount(count)\n      }\n    }\n\n    // Initial calculation\n    updateSkeletonCount()\n\n    // Recalculate on window resize\n    window.addEventListener(\"resize\", updateSkeletonCount)\n    return () => {\n      window.removeEventListener(\"resize\", updateSkeletonCount)\n    }\n  }, [])\n\n  return (\n    <Stack\n      ref={containerRef}\n      style={{ height: \"100%\", overflow: \"hidden\" }}\n      direction={\"column\"}\n      gap={0}\n    >\n      {Array.from({ length: skeletonCount }).map((_, index) => (\n        <ResultListItemSkeleton key={index} />\n      ))}\n    </Stack>\n  )\n}\n","import { Box, Typography } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\n\nexport default function ChooseClassMsg() {\n  const { t } = useTranslation()\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"70%\",\n      }}\n    >\n      <Typography sx={{ fontSize: \"20px\" }}>{t(\"ResultsStage.ChooseClass\")}</Typography>\n    </Box>\n  )\n}\n","import {\n  ControlModel,\n  OnlineControlModel,\n  RunnerModel,\n  SplitModel,\n} from \"../../../../../../../../../../../shared/EntityTypes.ts\"\nimport {\n  ProcessedRunnerModel,\n  ProcessedSplitModel,\n  RadioSplitModel,\n} from \"../../../../../../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { DateTime } from \"luxon\"\n\nexport type CourseControlModel = {\n  control: ControlModel | null\n  order_number: number | null // TODO: It can't be null\n}\n\nexport function getCourseFromRunner(\n  runnerList: RunnerModel[] | ProcessedRunnerModel[],\n): CourseControlModel[] {\n  let courseControlList: CourseControlModel[] = []\n\n  for (let i = 0; i < runnerList.length; i++) {\n    const runner: ProcessedRunnerModel | RunnerModel = runnerList[i]\n    const splitList = runner.stage.splits\n\n    if (splitList) {\n      try {\n        courseControlList = getCourseFromSplits(splitList)\n        break\n      } catch (e) {\n        console.error(e)\n      }\n    }\n  }\n  return courseControlList\n}\n\nexport function getCourseFromSplits(\n  splitsList: SplitModel[] | ProcessedSplitModel[],\n): CourseControlModel[] {\n  const splitListCopy = [...splitsList]\n\n  return splitListCopy.map((split): CourseControlModel => {\n    return {\n      control: split.control,\n      order_number: split.order_number,\n    }\n  })\n}\n\nexport function getOnlineControlsCourseFromClassSplits(\n  controlList: OnlineControlModel[],\n): OnlineControlModel[] {\n  const controlListCopy = [...controlList] // TODO: avoid copying, this function should be called only once. Move it to classes call?\n\n  // Add finish\n  controlListCopy.push({\n    station: \"Finish\",\n    id: \"FinishOlineControl\",\n  })\n\n  return controlListCopy\n}\n\n/**\n * Get online splits from a Processed Splits list and compute the next online control\n * @param splitList List of ProcessedSplitModel to extract online controls from\n * @param radiosList List of OnlineControlModel with the online controls\n * @param startTime ISO string startTime of the runner\n */\nexport function getOnlineSplits(\n  splitList: ProcessedSplitModel[],\n  radiosList: OnlineControlModel[],\n  startTime: string | null,\n): RadioSplitModel[] {\n  // Extract splits that are radio controls\n  const onlineSplitStationsNumber = radiosList.map((control) => control.station)\n  const Splits = splitList.filter((split) =>\n    split.control ? onlineSplitStationsNumber.includes(split.control.station) : true,\n  )\n\n  // Convert them to RadioSplitModel\n  const RadioSplits = Splits.map((split): RadioSplitModel => ({ ...split, is_next: null }))\n\n  // Find the next radio split\n  let prevTimeString = startTime\n  for (let i = 0; i < RadioSplits.length; i++) {\n    const split = RadioSplits[i]\n    if (split.reading_time === null && prevTimeString !== null) {\n      split.is_next = DateTime.fromISO(prevTimeString)\n      break\n    } else {\n      prevTimeString = split.reading_time\n    }\n  }\n\n  // Return radio splits\n  return RadioSplits\n}\n","import {\n  ParticipantModel,\n  SplitModel,\n  StageClassModel,\n} from \"../../../../../../shared/EntityTypes.ts\"\nimport {\n  ProcessedRunnerResultModel,\n  ProcessedSplitModel,\n} from \"../../../../components/VirtualTicket/shared/EntityTypes.ts\"\nimport { DateTime } from \"luxon\"\nimport { getOnlineSplits } from \"../../pages/FootO/pages/Splits/components/FootOSplitsTable/shared/footOSplitsTablefunctions.ts\"\n\n/**\n * This in an auxiliary function add the required attributes to be ProcessedSplitModel\n * with null values.\n * @param split Split to be processed\n */\nexport function createProcessedSplitFields(split: SplitModel): ProcessedSplitModel {\n  return {\n    ...split,\n    time: null,\n    time_behind: null,\n    position: null,\n    cumulative_time: null,\n    cumulative_behind: null,\n    cumulative_position: null,\n  }\n}\n\n/**\n * This function fills the time and cumulative time of splits. Also, add a split for the finish line\n *\n * Splits are assumed to be ordered by order_number (and thus, punching time)\n * @param split_list\n * @param start_time\n * @param finish_time\n * @param participantId\n * @param time_seconds Final time to be displayed in the finish line cumulative time\n */\nexport function computeSplitListTimes(\n  split_list: ProcessedSplitModel[],\n  start_time: DateTime | null,\n  finish_time: string | null,\n  participantId: string,\n  time_seconds: number,\n): ProcessedSplitModel[] {\n  const parsed_finish_time = finish_time ? DateTime.fromISO(finish_time) : null\n\n  // Process regular splits\n  const processed_split_list = split_list.map((split, index, array): ProcessedSplitModel => {\n    if (start_time && split.reading_time) {\n      const reading_time = DateTime.fromISO(split.reading_time)\n      split.cumulative_time = reading_time.diff(start_time).as(\"seconds\")\n\n      // first split\n      if (index == 0) {\n        split.time = split.cumulative_time\n        // second to last-1 splits\n      } else {\n        const prev_reading_time_string = array[index - 1].reading_time\n        if (prev_reading_time_string) {\n          split.time = reading_time.diff(DateTime.fromISO(prev_reading_time_string)).as(\"seconds\")\n        }\n      }\n    }\n    return split\n  })\n\n  // Add finish control\n  if (split_list.length > 0 && start_time) {\n    // @ts-expect-error linter doesn't know that the length of splits is at least 1\n    const prev_reading_time_string = split_list.at(-1).reading_time\n\n    processed_split_list.push({\n      id: `${participantId}-finishSplit`,\n      reading_time: finish_time,\n      order_number: Infinity,\n      points: 0,\n      time:\n        prev_reading_time_string && parsed_finish_time\n          ? parsed_finish_time.diff(DateTime.fromISO(prev_reading_time_string)).as(\"seconds\")\n          : null, // Time in seconds for this split\n      time_behind: null, // Time behind best runner in seconds for this split\n      position: null, // Position in this split\n      cumulative_time: prev_reading_time_string && parsed_finish_time ? time_seconds : null, // Time in seconds since start\n      cumulative_behind: null, // Time in seconds behind the best runner\n      cumulative_position: null, // Position from start\n      control: null, // No control at finish line\n      is_intermediate: true, // Finish is always an online control\n    })\n  }\n\n  // return\n  return processed_split_list\n}\n\n/**\n * Auxiliary function to sort split\n * @param a first split to compare\n * @param b second split to compare\n */\nfunction sorterSplitByOrderNumber(\n  a: ProcessedSplitModel | SplitModel,\n  b: ProcessedSplitModel | SplitModel,\n): number {\n  if (a.order_number && b.order_number) {\n    return a.order_number - b.order_number\n  } else if (!a.order_number && !b.order_number) {\n    return 0\n  } else if (a.order_number) {\n    return 1\n  } else {\n    return -1\n  }\n}\n\ntype FieldsToReplace = {\n  stage: ProcessedRunnerResultModel\n}\n\ntype ReplaceParticipantFields<T extends ParticipantModel> = Omit<T, keyof FieldsToReplace> &\n  FieldsToReplace\n\nexport function processParticipant<T extends ParticipantModel>(\n  participant: T,\n  classesList?: StageClassModel[],\n): ReplaceParticipantFields<T> {\n  const stage = participant.stage\n\n  if (stage) {\n    // Process splits\n    //// create fields\n    let processed_splits_list = stage.splits.map(createProcessedSplitFields)\n    processed_splits_list.sort(sorterSplitByOrderNumber)\n\n    //// compute times\n    const start_time = stage.start_time ? DateTime.fromISO(stage.start_time) : null\n    processed_splits_list = computeSplitListTimes(\n      processed_splits_list,\n      start_time,\n      stage.finish_time,\n      participant.id,\n      stage.time_seconds,\n    )\n\n    // Extract online splits\n    const participantStageClass =\n      participant.class && classesList\n        ? classesList.find((cls) => cls.id === participant.class?.id)\n        : null\n\n    const onlineControlList = participantStageClass ? participantStageClass.splits : null\n\n    const online_splits =\n      onlineControlList && onlineControlList.length > 0\n        ? getOnlineSplits(processed_splits_list, onlineControlList, stage.start_time)\n        : []\n\n    // Return\n    const processed_stage = {\n      ...stage,\n      splits: processed_splits_list,\n      online_splits: online_splits,\n    }\n    return {\n      ...participant,\n      stage: processed_stage,\n    } as ReplaceParticipantFields<T>\n  } else {\n    // @ts-expect-error TS2352 Temporally set Participant as non nullable\n    return participant as ReplaceParticipantFields<T>\n  }\n}\n","import { RunnerModel, StageClassModel } from \"../../../../../shared/EntityTypes.ts\"\n\nimport { ProcessedRunnerModel } from \"./EntityTypes.ts\"\nimport { hasChipDownload, isRunnerNC } from \"../../../pages/Results/shared/functions.ts\"\nimport { getCourseFromRunner } from \"../../../pages/Results/pages/FootO/pages/Splits/components/FootOSplitsTable/shared/footOSplitsTablefunctions.ts\"\nimport { processParticipant } from \"../../../pages/Results/shared/functions/runnerProccesing.ts\"\n\nimport { captureException as sentryCaptureException, withScope } from \"@sentry/react\"\n\n/**\n * Create a processed runners from runners\n *\n * Runners internal params are ordered and the time and cumulative time of their splits is computed if possible\n *\n * @param runners runners to process\n * @param classesList classes to pick online controls from\n */\nexport function processRunnerData(\n  runners: RunnerModel[],\n  classesList?: StageClassModel[],\n): ProcessedRunnerModel[] {\n  return runners.map((runner): ProcessedRunnerModel => {\n    const processed_runner = processParticipant(runner, classesList)\n\n    if (processed_runner.runners) {\n      const fully_processed_runner = {\n        ...processed_runner,\n        runners: processed_runner.runners.map((runner) => processParticipant(runner, classesList)),\n      }\n      fully_processed_runner.runners.sort((a, b) => a.leg_number - b.leg_number)\n\n      return fully_processed_runner\n    } else {\n      // @ts-expect-error It is not picking up that if runners enters the other conditional it is empty and, thus a valid ProcessedTeamRunner\n      return processed_runner\n    }\n  })\n}\n\nexport function calculatePositionsAndBehindsFootO(\n  runners: ProcessedRunnerModel[],\n  excludeNC: boolean = true,\n): ProcessedRunnerModel[] {\n  if (runners.length > 0) {\n    const splits = getCourseFromRunner(runners)\n\n    // Generate time matrices for splits\n    const timesTable = splits.map((_, index) => {\n      return runners.map((runner) => {\n        // Compute for runner with coherent splits and download\n        if (runner.stage.splits[index] && hasChipDownload(runner)) {\n          // handle NC\n          if (isRunnerNC(runner) && excludeNC) {\n            return null\n          } else {\n            return runner.stage.splits[index].time\n          }\n        } else {\n          return null\n        }\n      })\n    })\n    timesTable.forEach((splitList) => {\n      splitList.sort((a, b) => {\n        // Handle cases where time is null\n        if (a === null && b === null) return 0 // Both are null, consider equal\n        if (a === null) return 1 // Place `null` times after valid times\n        if (b === null) return -1 // Place valid times before `null`\n\n        // Both times are numbers, compare them\n        return a - b\n      })\n    })\n\n    // Generate time matrices for cumulative splits\n    const cumulativeTable = splits.map((_, index) => {\n      return runners.map((runner) => {\n        // only map times if the runner is ok\n        const missingPunchFrom = runner.stage.splits.findIndex((split) => split.time === null)\n\n        // Exclude runners without download\n        if (\n          runner.stage.splits[index] &&\n          hasChipDownload(runner) &&\n          (missingPunchFrom === -1 || missingPunchFrom > index)\n        ) {\n          // handle nc\n          if (isRunnerNC(runner) && excludeNC) {\n            return null\n          } else {\n            return runner.stage.splits[index].cumulative_time\n          }\n        } else {\n          return null\n        }\n      })\n    })\n    cumulativeTable.forEach((splitList) => {\n      splitList.sort((a, b) => {\n        // Handle cases where time is null\n        if (a === null && b === null) return 0 // Both are null, consider equal\n        if (a === null) return 1 // Place `null` times after valid times\n        if (b === null) return -1 // Place valid times before `null`\n\n        // Both times are numbers, compare them\n        return a - b\n      })\n    })\n\n    // update runners\n    return runners.map((runner): ProcessedRunnerModel => {\n      // only compute for runners with downloads\n      if (hasChipDownload(runner)) {\n        try {\n          const isNC = isRunnerNC(runner)\n          const newSplits = runner.stage.splits.map((split, index, splitsArray) => {\n            const bestTime: number | null = timesTable[index][0]\n            const best_cumulative: number | null = cumulativeTable[index][0]\n            if (bestTime !== null && best_cumulative !== null) {\n              const missingPunchFrom = splitsArray.findIndex((split) => split.time === null)\n              const position = findPositionInTimesTable(\n                timesTable,\n                split.time,\n                index,\n                isNC,\n                excludeNC,\n              )\n              const cumulativePosition = findPositionInTimesTable(\n                cumulativeTable,\n                split.cumulative_time,\n                index,\n                isNC,\n                excludeNC,\n              )\n\n              // Check when cumulative differences should be meaningful\n              const cumulative_difference =\n                split.cumulative_time !== null &&\n                (missingPunchFrom === -1 || missingPunchFrom > index)\n\n              return {\n                ...split,\n                time_behind: split.time !== null ? split.time - bestTime : null,\n                position: split.time !== null ? position : null,\n                cumulative_behind:\n                  cumulative_difference && split.cumulative_time\n                    ? split.cumulative_time - best_cumulative\n                    : null,\n                cumulative_position: cumulative_difference ? cumulativePosition : null,\n              }\n            } else {\n              return split\n            }\n          })\n          return {\n            ...runner,\n            stage: {\n              ...runner.stage,\n              splits: newSplits,\n            },\n          }\n        } catch (error) {\n          // if an error happens return the runner without updating it\n          withScope((scope) => {\n            scope.setExtra(\"runner\", runner)\n            scope.setExtra(\"runnerList\", runners)\n            scope.setExtra(\"origin\", \"calculatePositionsAndBehindsFootO\")\n\n            sentryCaptureException(error)\n          })\n\n          console.error(\n            \"Error updating runner in `calculatePositionsAndBehindsFootO`.\" +\n              ` Runner ${runner.id}, ${runner.full_name} could not be updated.\\n\\n`,\n            error,\n          )\n          return runner\n        }\n\n        // No download, no update\n      } else {\n        return runner\n      }\n    })\n  } else {\n    return []\n  }\n}\n\n/**\n * Compute the position of a runner's split from a timesTable of all splits\n *\n * @param timesTable The outer list is the station in the course, the inner list is the split in that station for all runners\n * @param time Time of the runner in that station\n * @param index Index of the station\n * @param isNC Whether the runner is \"no classify\" or not\n * @param excludeNC Whether \"no classify\" runners are being excluded from computations\n */\nfunction findPositionInTimesTable(\n  timesTable: (number | null)[][],\n  time: number | null,\n  index: number,\n  isNC: boolean,\n  excludeNC: boolean,\n) {\n  // handle missing time\n  if (time === null) {\n    return null\n  }\n\n  // handle nc\n  if (isNC && excludeNC) {\n    // Time is not in timesTable, so we find how good we are compared to classify runners.\n    const allSplits = timesTable[index]\n    let position = allSplits.length\n    for (let i = 0; i < allSplits.length; i++) {\n      const thisSplit = allSplits[i]\n      if (thisSplit && time <= thisSplit) {\n        position = i + 1\n        break\n      }\n    }\n\n    return position\n  } else {\n    // Time must be in the timesTable\n    return timesTable[index].indexOf(time) + 1\n  }\n}\n","import { Typography } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\n\ntype RacePositionProps = {\n  position: number | bigint | null\n  isNC?: boolean\n  hasDownload?: boolean\n}\n\nexport default function RacePosition({ position, isNC, hasDownload }: RacePositionProps) {\n  const { t } = useTranslation()\n\n  if (isNC) {\n    return (\n      <Typography sx={{ color: \"primary.main\" }}>{t(\"ResultsStage.statusCodes.nc\")}</Typography>\n    )\n  } else {\n    const color = hasDownload ? \"primary.main\" : \"text.secondary\"\n    const positionString = position ? `${position}.` : \"\"\n\n    return <Typography sx={{ color: color }}>{positionString}</Typography>\n  }\n}\n"],"names":["GroupsOutlinedIcon","createSvgIcon","_jsx","LeaderboardOutlinedIcon","RefreshIcon","SearchIcon","AutocompleteListSkeletonItem","Skeleton","variant","width","height","ListSkeleton","SkeletonItem","style","className","gap","minItems","containerRef","useRef","skeletonRef","skeletonHeight","setSkeletonHeight","useState","skeletonCount","setSkeletonCount","useEffect","current","resizeObserver","ResizeObserver","entry","contentRect","observe","disconnect","containerHeight","clientHeight","count","Math","floor","Stack","ref","overflow","direction","children","visibility","position","Array","from","length","map","_","index","AutocompleteListContainer","isLoading","List","sx","padding","flexGrow","AutocompleteListItem","name","onClick","ListItemButton","ListItemText","AutocompleteListSearchBar","value","setValue","t","useTranslation","TextField","placeholder","onChange","e","target","marginY","slotProps","input","mx","mt","endAdornment","InputAdornment","Tooltip","title","IconButton","size","ClearIcon","AutocompleteList","itemList","nameExtractor","keyExtractor","handleClick","normalizeQuery","query","setQuery","internalNormalizeQuery","useMemo","toLowerCase","displayedList","filter","item","includes","Box","ignoreDashes","replace","ignoreDashesAndUnderscores","CustomTabPanel","props","other","role","hidden","id","ClassSelector","isOpen","setIsOpen","currentTab","setCurrentTab","getClassClubSearchParamName","useClassClubSearchParams","hasInitialized","isClassInSearchParam","handleClassClick","newClass","setActiveClassClubId","handleClubClick","newClub","_jsxs","FormControl","maxWidth","cursor","InputLabel","shrink","activeClassClub","isClass","OutlinedInput","readOnly","notched","short_name","ExpandMoreIcon","label","pointerEvents","inputProps","tabIndex","Dialog","open","onClose","maxHeight","fullWidth","DialogContent","display","justifyContent","boxSizing","flexShrink","Tabs","scrollButtons","newValue","Tab","icon","iconPosition","right","top","color","theme","palette","grey","CloseIcon","classesQuery","data","classItem","isFetching","clubsQuery","club","WrongResultsFileUploadedMsg","navigate","useNavigate","marginBottom","Alert","severity","AlertTitle","Trans","i18nKey","Link","StageLayout","flexDirection","minHeight","isWrongFileUploaded","_Fragment","alignItems","activeItem","setActiveClassClub","handleRefreshClick","marginTop","flex","paddingBottom","ErrorBoundary","fallback","GeneralErrorFallback","displayMsg","RESULT_STATUS","RESULT_STATUS_TEXT","RESULT_STATUS_PRIORITY","hasChipDownload","runner","uploadType","isRunnerModel","UPLOAD_TYPES","isRunnerNC","_a","getClubName","noClubMsg","compareLegNumber","a","b","_b","getClassName","isDNS","isNC","runnerService","statusOrder","status","byStatus","aStatusCode","bStatusCode","aPosition","bPosition","statusA","statusB","byStageStatus","aStatus","bStatus","_c","_d","byPosition","isANC","isBNC","runnerCompareFunctions","byStagePosition","posA","posB","byOverallPosition","byName","nameA","nameB","byStartTime","ascending","startTimeA","startTimeB","byIsNC","parseResultStatus","multiLevelCompare","compareFunctionList","compareResult","i","sortRunners","runnersList","NowContext","createContext","DateTime","NowProvider","now","setNow","intervalId","setInterval","clearInterval","Provider","ResultListContainer","spacing","flexWrap","ResultListItemSkeleton","justifyContents","borderBottom","paddingY","bgcolor","animation","ResultsListSkeleton","updateSkeletonCount","window","addEventListener","removeEventListener","ChooseClassMsg","Typography","fontSize","getCourseFromRunner","runnerList","courseControlList","splitList","getCourseFromSplits","splitsList","split","getOnlineControlsCourseFromClassSplits","controlList","controlListCopy","getOnlineSplits","radiosList","startTime","onlineSplitStationsNumber","control","RadioSplits","prevTimeString","createProcessedSplitFields","computeSplitListTimes","split_list","start_time","finish_time","participantId","time_seconds","parsed_finish_time","processed_split_list","array","reading_time","prev_reading_time_string","sorterSplitByOrderNumber","processParticipant","participant","classesList","stage","processed_splits_list","participantStageClass","cls","onlineControlList","online_splits","processed_stage","processRunnerData","runners","processed_runner","fully_processed_runner","calculatePositionsAndBehindsFootO","excludeNC","splits","timesTable","cumulativeTable","missingPunchFrom","newSplits","splitsArray","bestTime","best_cumulative","findPositionInTimesTable","cumulativePosition","cumulative_difference","error","withScope","scope","sentryCaptureException","time","allSplits","thisSplit","RacePosition","hasDownload","positionString"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}