{"version":3,"file":"EventService-Qd93CJkn.js","sources":["../../src/pages/Results/services/EventService.ts"],"sourcesContent":["import { get } from \"../../../services/ApiConfig.ts\"\nimport {\n  ClubModel,\n  Data,\n  EventDetailModel,\n  EventModel,\n  Page,\n  RunnerModel,\n  StageClassModel,\n  StageModel,\n} from \"../../../shared/EntityTypes.ts\"\nconst baseUrl = \"events\"\n\nexport async function getEventList(\n  page: number = 1,\n  when?: \"today\" | \"past\" | \"future\",\n  token?: string | null,\n  limit?: number,\n): Promise<Page<EventModel>> {\n  const searchParams = new URLSearchParams()\n\n  // set different search params\n  searchParams.set(\"page\", page.toString())\n  if (when) {\n    searchParams.set(\"when\", when)\n  }\n  if (limit) {\n    searchParams.set(\"limit\", limit.toString())\n  }\n\n  // return query\n  return await get<Page<EventModel>>(`${baseUrl}?${searchParams.toString()}`, token)\n}\n\nexport async function getEventDetail(\n  id: string,\n  token?: string | null,\n): Promise<Data<EventDetailModel>> {\n  return await get<Data<EventDetailModel>>(`${baseUrl}/${id}`, token)\n}\n\nexport async function getStageDetail(\n  eventId: string,\n  stageId: string,\n  token?: string | null,\n): Promise<Data<StageModel>> {\n  return await get<Data<StageModel>>(`${baseUrl}/${eventId}/stages/${stageId}`, token)\n}\n\nexport async function getClassesInStage(\n  event_id: string,\n  stage_id: string,\n): Promise<Page<StageClassModel>> {\n  return await get<Page<StageClassModel>>(baseUrl + `/${event_id}/stages/${stage_id}/classes`)\n}\n\n/**\n * Fetch all clubs that belong to a given stage\n * @param event_id ID of the event that the stage belongs to\n * @param stage_id ID of the stage we want to gather data from\n */\nexport async function getClubsInStage(\n  event_id: string,\n  stage_id: string,\n): Promise<Page<ClubModel>> {\n  return await get<Page<ClubModel>>(`${baseUrl}/${event_id}/stages/${stage_id}/clubs`)\n}\n\nexport async function getRunnersInStage(\n  event_id: string,\n  stage_id: string,\n  class_id?: string,\n  club_id?: string,\n): Promise<Page<RunnerModel>> {\n  let url = `/${event_id}/stages/${stage_id}/results`\n\n  // Set url search params\n  const urlSearchParam = new URLSearchParams()\n\n  if (class_id) {\n    urlSearchParam.set(\"class_id\", class_id)\n  }\n  if (club_id) {\n    urlSearchParam.set(\"club_id\", club_id)\n  }\n\n  // Build final url and make query\n  url = url + `?${urlSearchParam.toString()}`\n\n  return await get<Page<RunnerModel>>(baseUrl + url)\n}\n"],"names":["baseUrl","getEventList","page","when","token","limit","searchParams","get","getEventDetail","id","getClassesInStage","event_id","stage_id","getClubsInStage","getRunnersInStage","class_id","club_id","url","urlSearchParam"],"mappings":"kXAWA,MAAMA,EAAU,SAEhB,eAAsBC,EACpBC,EAAe,EACfC,EACAC,EACAC,EAC2B,CAC3B,MAAMC,EAAe,IAAI,gBAGzB,OAAAA,EAAa,IAAI,OAAQJ,EAAK,SAAA,CAAU,EACpCC,GACFG,EAAa,IAAI,OAAQH,CAAI,EAE3BE,GACFC,EAAa,IAAI,QAASD,EAAM,SAAA,CAAU,EAIrC,MAAME,EAAsB,GAAGP,CAAO,IAAIM,EAAa,SAAA,CAAU,GAAIF,CAAK,CACnF,CAEA,eAAsBI,EACpBC,EACAL,EACiC,CACjC,OAAO,MAAMG,EAA4B,GAAGP,CAAO,IAAIS,CAAE,GAAIL,CAAK,CACpE,CAUA,eAAsBM,EACpBC,EACAC,EACgC,CAChC,OAAO,MAAML,EAA2BP,EAAU,IAAIW,CAAQ,WAAWC,CAAQ,UAAU,CAC7F,CAOA,eAAsBC,EACpBF,EACAC,EAC0B,CAC1B,OAAO,MAAML,EAAqB,GAAGP,CAAO,IAAIW,CAAQ,WAAWC,CAAQ,QAAQ,CACrF,CAEA,eAAsBE,EACpBH,EACAC,EACAG,EACAC,EAC4B,CAC5B,IAAIC,EAAM,IAAIN,CAAQ,WAAWC,CAAQ,WAGzC,MAAMM,EAAiB,IAAI,gBAE3B,OAAIH,GACFG,EAAe,IAAI,WAAYH,CAAQ,EAErCC,GACFE,EAAe,IAAI,UAAWF,CAAO,EAIvCC,EAAMA,EAAM,IAAIC,EAAe,SAAA,CAAU,GAElC,MAAMX,EAAuBP,EAAUiB,CAAG,CACnD"}